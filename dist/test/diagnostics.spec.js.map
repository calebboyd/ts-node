{"version":3,"file":"diagnostics.spec.js","sourceRoot":"","sources":["../../src/test/diagnostics.spec.ts"],"names":[],"mappings":";;AACA,uCAA0C;AAC1C,uCAA4C;AAC5C,kBAAiC;AACjC,kBAA8B;AAC9B,MAAM,IAAI,GAAG,IAAA,iBAAO,EAAC,mBAAS,CAAC,CAAC;AAEhC,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAChD,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;QAC/B,8BAA8B;QAC9B,gFAAgF;QAChF,uDAAuD;QACvD,6CAA6C;QAC7C,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC;YAC/C,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE;YACnD,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;QACH,IAAI;YACF,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;SAC9C;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,EAAE,GAAG,EAAE,GAAc,EAAE,CAAC;SAChC;QACD,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,IAAI,CAAC;IAC5B,MAAM,iBAAiB,GAAG,yFAAyF,CAAC;IACpH,MAAM,sBAAsB,GAC1B,iGAAiG,CAAC;IAEpG,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,EAAE,EAAE;QAChC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC;QAC1B,IAAA,gBAAM,EAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAA,gBAAM,EAAC,GAAI,CAAC,CAAC,aAAa,CAAC;YACzB,OAAO,EAAE,gBAAM,CAAC,cAAc,CAAC,sBAAsB,CAAC;YACtD,cAAc,EAAE,gBAAM,CAAC,cAAc,CAAC,sBAAsB,CAAC;YAC7D,eAAe,EAAE,CAAC,cAAc,CAAC;YACjC,WAAW,EAAE;gBACX;oBACE,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,EAAE;oBACT,MAAM,EAAE,CAAC;oBACT,WAAW,EAAE,gBAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC;iBACtD;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type { TSError } from '..';\nimport { ctxTsNode, ts } from './helpers';\nimport { context, expect } from './testlib';\nimport * as semver from 'semver';\nimport { once } from 'lodash';\nconst test = context(ctxTsNode);\n\ntest.suite('TSError diagnostics', ({ context }) => {\n  const test = context(async (t) => {\n    // Locking to es2020, because:\n    // 1) es2022 -- default in @tsconfig/bases for node18 -- changes this diagnostic\n    //   to be a composite \"No overload matches this call.\"\n    // 2) TS 4.2 doesn't support es2021 or higher\n    const service = t.context.tsNodeUnderTest.create({\n      compilerOptions: { target: 'es5', lib: ['es2020'] },\n      skipProject: true,\n    });\n    try {\n      service.compile('new Error(123)', 'test.ts');\n    } catch (err) {\n      return { err: err as TSError };\n    }\n    return { err: undefined };\n  });\n\n  const diagnosticCode = 2345;\n  const diagnosticMessage = /Argument of type '.*?' is not assignable to parameter of type 'string( \\| undefined)?'./;\n  const diagnosticErrorMessage =\n    /TS2345: Argument of type '.*?' is not assignable to parameter of type 'string( \\| undefined)?'./;\n\n  test('should throw errors', (t) => {\n    const { err } = t.context;\n    expect(err).toBeDefined();\n    expect(err!).toMatchObject({\n      message: expect.stringMatching(diagnosticErrorMessage),\n      diagnosticText: expect.stringMatching(diagnosticErrorMessage),\n      diagnosticCodes: [diagnosticCode],\n      diagnostics: [\n        {\n          code: diagnosticCode,\n          start: 10,\n          length: 3,\n          messageText: expect.stringMatching(diagnosticMessage),\n        },\n      ],\n    });\n  });\n});\n"]}