{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../src/test/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { context } from './testlib';\nimport * as expect from 'expect';\nimport { join, resolve, sep as pathSep } from 'path';\nimport {\n  BIN_PATH_JS,\n  CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG,\n  tsSupportsMtsCtsExtensions,\n  BIN_PATH,\n  ROOT_DIR,\n  TEST_DIR,\n  testsDirRequire,\n  ctxTsNode,\n  CMD_TS_NODE_WITH_PROJECT_FLAG,\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  CMD_ESM_LOADER_WITHOUT_PROJECT,\n  createExec,\n} from './helpers';\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\nconst test = context(ctxTsNode);\n\ntest.suite('ts-node', (test) => {\n  test('should not load typescript outside of loadConfig', async () => {\n    const r = await exec(\n      `node -e \"require('ts-node'); console.dir(Object.keys(require.cache).filter(k => k.includes('node_modules/typescript')).length)\"`\n    );\n    expect(r.err).toBe(null);\n    expect(r.stdout).toBe('0\\n');\n  });\n\n  test.suite('cli', (test) => {\n    test('should execute cli', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} hello-world`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, world!\\n');\n    });\n\n    test('shows usage via --help', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --help`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toMatch(/Usage: ts-node /);\n    });\n    test('shows version via -v', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} -v`);\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('v' + testsDirRequire('ts-node/package').version);\n    });\n    test('shows version of compiler via -vv', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} -vv`);\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe(\n        `ts-node v${testsDirRequire('ts-node/package').version}\\n` +\n          `node ${process.version}\\n` +\n          `compiler v${testsDirRequire('typescript/package').version}`\n      );\n    });\n\n    test('should register via cli', async () => {\n      const r = await exec(`node -r ts-node/register hello-world.ts`, {\n        cwd: TEST_DIR,\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, world!\\n');\n    });\n\n    test('should execute cli with absolute path', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} \"${join(TEST_DIR, 'hello-world')}\"`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, world!\\n');\n    });\n\n    test('should print scripts', async () => {\n      const r = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} -pe \"import { example } from './complex/index';example()\"`\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('example\\n');\n    });\n\n    test(\"should expose ts-node Service as a symbol property on Node's `process` object\", async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} env`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('object\\n');\n    });\n\n    test('should allow js', async () => {\n      const r = await exec(\n        [\n          CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG,\n          '-O \"{\\\\\"allowJs\\\\\":true}\"',\n          '-pe \"import { main } from \\'./allow-js/run\\';main()\"',\n        ].join(' ')\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('hello world\\n');\n    });\n\n    test('should include jsx when `allow-js` true', async () => {\n      const r = await exec(\n        [\n          CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG,\n          '-O \"{\\\\\"allowJs\\\\\":true}\"',\n          '-pe \"import { Foo2 } from \\'./allow-js/with-jsx\\'; Foo2.sayHi()\"',\n        ].join(' ')\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('hello world\\n');\n    });\n\n    test.suite('should support cts when module = CommonJS', (test) => {\n      test.if(tsSupportsMtsCtsExtensions);\n      test('test', async (t) => {\n        const r = await exec(\n          [CMD_TS_NODE_WITHOUT_PROJECT_FLAG, '-pe \"import { main } from \\'./index.cjs\\';main()\"'].join(' '),\n          {\n            cwd: join(TEST_DIR, 'ts45-ext/ext-cts'),\n          }\n        );\n        expect(r.err).toBe(null);\n        expect(r.stdout).toBe('hello world\\n');\n      });\n    });\n\n    test.suite('should support mts when module = ESNext', (test) => {\n      test.if(tsSupportsMtsCtsExtensions);\n      test('test', async () => {\n        const r = await exec([CMD_TS_NODE_WITHOUT_PROJECT_FLAG, './entrypoint.mjs'].join(' '), {\n          cwd: join(TEST_DIR, 'ts45-ext/ext-mts'),\n        });\n        expect(r.err).toBe(null);\n        expect(r.stdout).toBe('hello world\\n');\n      });\n    });\n\n    test('should eval code', async () => {\n      const r = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -e \"import * as m from './module';console.log(m.example('test'))\"`\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('TEST\\n');\n    });\n\n    test('should import empty files', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -e \"import './empty'\"`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('');\n    });\n\n    test('should throw typechecking errors', async () => {\n      const r = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} -e \"import * as m from './module';console.log(m.example(123))\"`\n      );\n      if (r.err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(r.err.message).toMatch(\n        new RegExp(\"TS2345: Argument of type '(?:number|123)' \" + \"is not assignable to parameter of type 'string'\\\\.\")\n      );\n    });\n\n    test('should be able to ignore diagnostic', async () => {\n      const r = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_FLAG} --ignore-diagnostics 2345 -e \"import * as m from './module';console.log(m.example(123))\"`\n      );\n      if (r.err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(r.err.message).toMatch(\n        /TypeError: (?:(?:undefined|foo\\.toUpperCase) is not a function|.*has no method \\'toUpperCase\\')/\n      );\n    });\n\n    test('should work with source maps', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} \"throw error\"`);\n      if (r.err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(r.err.message).toMatch(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should work with source maps in --transpile-only mode', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only \"throw error\"`);\n      if (r.err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(r.err.message).toMatch(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('eval should work with source maps', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} -pe \"import './throw error'\"`);\n      if (r.err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(r.err.message).toMatch(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n        ].join('\\n')\n      );\n    });\n\n    for (const flavor of [\n      '--transpiler ts-node/transpilers/swc transpile-only-swc',\n      '--transpiler ts-node/transpilers/swc-experimental transpile-only-swc',\n      '--swc transpile-only-swc',\n      'transpile-only-swc-via-tsconfig',\n      'transpile-only-swc-shorthand-via-tsconfig',\n    ]) {\n      test(`should support swc and third-party transpilers: ${flavor}`, async () => {\n        const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} ${flavor}`, {\n          env: {\n            ...process.env,\n            NODE_OPTIONS: `${process.env.NODE_OPTIONS || ''} --require ${require.resolve(\n              '../../tests/spy-swc-transpiler'\n            )}`,\n          },\n        });\n        expect(r.err).toBe(null);\n        expect(r.stdout).toMatch('Hello World! swc transpiler invocation count: 1\\n');\n      });\n    }\n\n    test.suite('should support `traceResolution` compiler option', (test) => {\n      test('prints traces before running code when enabled', async () => {\n        const r = await exec(`${BIN_PATH} --compiler-options=\"{ \\\\\"traceResolution\\\\\": true }\" -e \"console.log('ok')\"`);\n        expect(r.err).toBeNull();\n        expect(r.stdout).toContain('======== Resolving module');\n        expect(r.stdout.endsWith('ok\\n')).toBe(true);\n      });\n\n      test('does NOT print traces when not enabled', async () => {\n        const r = await exec(`${BIN_PATH} -e \"console.log('ok')\"`);\n        expect(r.err).toBeNull();\n        expect(r.stdout).not.toContain('======== Resolving module');\n        expect(r.stdout.endsWith('ok\\n')).toBe(true);\n      });\n    });\n\n    test('swc transpiler supports native ESM emit', async () => {\n      const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} ./index.ts`, {\n        cwd: resolve(TEST_DIR, 'transpile-only-swc-native-esm'),\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout).toMatch('Hello file://');\n    });\n\n    test('should pipe into `ts-node` and evaluate', async () => {\n      const p = exec(CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG);\n      p.child.stdin!.end(\"console.log('hello')\");\n      const r = await p;\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('hello\\n');\n    });\n\n    test('should pipe into `ts-node`', async () => {\n      const p = exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -p`);\n      p.child.stdin!.end('true');\n      const r = await p;\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('true\\n');\n    });\n\n    test('should pipe into an eval script', async () => {\n      const p = exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only -pe \"process.stdin.isTTY\"`);\n      p.child.stdin!.end('true');\n      const r = await p;\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('undefined\\n');\n    });\n\n    test('should support require flags', async () => {\n      const r = await exec(\n        `${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -r ./hello-world -pe \"console.log('success')\"`\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, world!\\nsuccess\\nundefined\\n');\n    });\n\n    test('should support require from node modules', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} -r typescript -e \"console.log('success')\"`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('success\\n');\n    });\n\n    test('should use source maps with react tsx', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} \"throw error react tsx.tsx\"`);\n      expect(r.err).not.toBe(null);\n      expect(r.err!.message).toMatch(\n        [\n          `${join(TEST_DIR, './throw error react tsx.tsx')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should use source maps with react tsx in --transpile-only mode', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only \"throw error react tsx.tsx\"`);\n      expect(r.err).not.toBe(null);\n      expect(r.err!.message).toMatch(\n        [\n          `${join(TEST_DIR, './throw error react tsx.tsx')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should allow custom typings', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} custom-types`);\n      // This error comes from *node*, meaning TypeScript respected the custom types (good) but *node* could not find the non-existent module (expected)\n      expect(r.err?.message).toMatch(/Error: Cannot find module 'does-not-exist'/);\n    });\n\n    test('should import js before ts by default', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} import-order/compiled`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, JavaScript!\\n');\n    });\n\n    test('should import ts before js when --prefer-ts-exts flag is present', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} --prefer-ts-exts import-order/compiled`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, TypeScript!\\n');\n    });\n\n    test('should import ts before js when TS_NODE_PREFER_TS_EXTS env is present', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} import-order/compiled`, {\n        env: { ...process.env, TS_NODE_PREFER_TS_EXTS: 'true' },\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, TypeScript!\\n');\n    });\n\n    test('should ignore .d.ts files', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_TRANSPILE_ONLY_FLAG} import-order/importer`);\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('Hello, World!\\n');\n    });\n\n    test.suite('issue #884', (test) => {\n      test('should compile', async (t) => {\n        const r = await exec(`\"${BIN_PATH}\" --project issue-884/tsconfig.json issue-884`);\n        expect(r.err).toBe(null);\n        expect(r.stdout).toBe('');\n      });\n    });\n\n    test.suite('issue #986', (test) => {\n      test('should not compile', async () => {\n        const r = await exec(`\"${BIN_PATH}\" --project issue-986/tsconfig.json issue-986`);\n        expect(r.err).not.toBe(null);\n        expect(r.stderr).toMatch(\"Cannot find name 'TEST'\"); // TypeScript error.\n        expect(r.stdout).toBe('');\n      });\n\n      test('should compile with `--files`', async () => {\n        const r = await exec(`\"${BIN_PATH}\" --files --project issue-986/tsconfig.json issue-986`);\n        expect(r.err).not.toBe(null);\n        expect(r.stderr).toMatch('ReferenceError: TEST is not defined'); // Runtime error.\n        expect(r.stdout).toBe('');\n      });\n    });\n\n    test('should have the correct working directory in the user entry-point', async () => {\n      const r = await exec(`${BIN_PATH} --cwd ./cjs index.ts`, {\n        cwd: resolve(TEST_DIR, 'working-dir'),\n      });\n\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('Passing');\n      expect(r.stderr).toBe('');\n    });\n\n    // Disabled due to bug:\n    // --cwd is passed to forked children when not using --esm, erroneously affects their entrypoint resolution.\n    // tracked/fixed by either https://github.com/TypeStrong/ts-node/issues/1834\n    // or https://github.com/TypeStrong/ts-node/issues/1831\n    test.skip('should be able to fork into a nested TypeScript script with a modified working directory', async () => {\n      const r = await exec(`${BIN_PATH} --cwd ./working-dir/forking/ index.ts`);\n\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('Passing: from main');\n      expect(r.stderr).toBe('');\n    });\n\n    test.suite('compiler host', (test) => {\n      test('should execute cli', async () => {\n        const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --compiler-host hello-world`);\n        expect(r.err).toBe(null);\n        expect(r.stdout).toBe('Hello, world!\\n');\n      });\n    });\n\n    test('should transpile files inside a node_modules directory when not ignored', async () => {\n      const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} from-node-modules/from-node-modules`);\n      if (r.err) throw new Error(`Unexpected error: ${r.err}\\nstdout:\\n${r.stdout}\\nstderr:\\n${r.stderr}`);\n      expect(JSON.parse(r.stdout)).toEqual({\n        external: {\n          tsmri: { name: 'typescript-module-required-internally' },\n          jsmri: { name: 'javascript-module-required-internally' },\n          tsmii: { name: 'typescript-module-imported-internally' },\n          jsmii: { name: 'javascript-module-imported-internally' },\n        },\n        tsmie: { name: 'typescript-module-imported-externally' },\n        jsmie: { name: 'javascript-module-imported-externally' },\n        tsmre: { name: 'typescript-module-required-externally' },\n        jsmre: { name: 'javascript-module-required-externally' },\n      });\n    });\n\n    test.suite('should respect maxNodeModulesJsDepth', (test) => {\n      test('for unscoped modules', async () => {\n        const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} maxnodemodulesjsdepth`);\n        expect(r.err).not.toBe(null);\n        expect(r.stderr.replace(/\\r\\n/g, '\\n')).toMatch(\n          'TSError: ⨯ Unable to compile TypeScript:\\n' +\n            \"maxnodemodulesjsdepth/other.ts(4,7): error TS2322: Type 'string' is not assignable to type 'boolean'.\\n\" +\n            '\\n'\n        );\n      });\n\n      test('for @scoped modules', async () => {\n        const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} maxnodemodulesjsdepth-scoped`);\n        expect(r.err).not.toBe(null);\n        expect(r.stderr.replace(/\\r\\n/g, '\\n')).toMatch(\n          'TSError: ⨯ Unable to compile TypeScript:\\n' +\n            \"maxnodemodulesjsdepth-scoped/other.ts(7,7): error TS2322: Type 'string' is not assignable to type 'boolean'.\\n\" +\n            '\\n'\n        );\n      });\n    });\n\n    test('--showConfig should log resolved configuration', async (t) => {\n      function native(path: string) {\n        return path.replace(/\\/|\\\\/g, pathSep);\n      }\n      function posix(path: string) {\n        return path.replace(/\\/|\\\\/g, '/');\n      }\n      const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --showConfig`);\n      expect(r.err).toBe(null);\n      t.is(\n        r.stdout,\n        JSON.stringify(\n          {\n            'ts-node': {\n              cwd: native(`${ROOT_DIR}/tests`),\n              projectSearchDir: native(`${ROOT_DIR}/tests`),\n              project: native(`${ROOT_DIR}/tests/tsconfig.json`),\n            },\n            compilerOptions: {\n              target: 'es6',\n              jsx: 'react',\n              noEmit: false,\n              strict: true,\n              typeRoots: [posix(`${ROOT_DIR}/tests/typings`), posix(`${ROOT_DIR}/node_modules/@types`)],\n              sourceMap: true,\n              inlineSourceMap: false,\n              inlineSources: true,\n              declaration: false,\n              outDir: './.ts-node',\n              module: 'commonjs',\n            },\n          },\n          null,\n          2\n        ) + '\\n'\n      );\n    });\n\n    test('should support compiler scope specified via tsconfig.json', async (t) => {\n      const r = await exec(\n        `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project ./scope/c/config/tsconfig.json ./scope/c/index.js`\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe(`value\\nFailures: 0\\n`);\n    });\n  });\n});\n\ntest('Falls back to transpileOnly when ts compiler returns emitSkipped', async () => {\n  const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project tsconfig.json ./outside-rootDir/foo.js`, {\n    cwd: join(TEST_DIR, 'emit-skipped-fallback'),\n  });\n  expect(r.err).toBe(null);\n  expect(r.stdout).toBe('foo\\n');\n});\n\ntest.suite('node environment', (test) => {\n  test.suite('Sets argv and execArgv correctly in forked processes', (test) => {\n    forkTest(`node --no-warnings ${BIN_PATH_JS}`, BIN_PATH_JS, '--no-warnings');\n    forkTest(`${BIN_PATH}`, process.platform === 'win32' ? BIN_PATH_JS : BIN_PATH);\n\n    function forkTest(command: string, expectParentArgv0: string, nodeFlag?: string) {\n      test(command, async (t) => {\n        const r = await exec(`${command} --skipIgnore ./recursive-fork/index.ts argv2`);\n        expect(r.err).toBeNull();\n        expect(r.stderr).toBe('');\n        const generations = r.stdout.split('\\n');\n        const expectation = {\n          execArgv: [nodeFlag, BIN_PATH_JS, '--skipIgnore'].filter((v) => v),\n          argv: [\n            // Note: argv[0] is *always* BIN_PATH_JS in child & grandchild\n            expectParentArgv0,\n            resolve(TEST_DIR, 'recursive-fork/index.ts'),\n            'argv2',\n          ],\n        };\n        expect(JSON.parse(generations[0])).toMatchObject(expectation);\n        expectation.argv[0] = BIN_PATH_JS;\n        expect(JSON.parse(generations[1])).toMatchObject(expectation);\n        expect(JSON.parse(generations[2])).toMatchObject(expectation);\n      });\n    }\n  });\n});\n"]}