{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../src/test/index.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { test, TestInterface } from './testlib';\nimport { expect } from 'chai';\nimport {\n  ChildProcess,\n  exec as childProcessExec,\n  ExecException,\n  ExecOptions,\n} from 'child_process';\nimport { join, resolve, sep as pathSep } from 'path';\nimport { tmpdir } from 'os';\nimport semver = require('semver');\nimport ts = require('typescript');\nimport proxyquire = require('proxyquire');\nimport type * as tsNodeTypes from '../index';\nimport * as fs from 'fs';\nimport {\n  unlinkSync,\n  existsSync,\n  lstatSync,\n  mkdtempSync,\n  fstat,\n  copyFileSync,\n  writeFileSync,\n} from 'fs';\nimport { NodeFS, npath } from '@yarnpkg/fslib';\nimport * as promisify from 'util.promisify';\nimport { sync as rimrafSync } from 'rimraf';\nimport type _createRequire from 'create-require';\nconst createRequire: typeof _createRequire = require('create-require');\nimport { pathToFileURL } from 'url';\nimport type * as Module from 'module';\nimport { PassThrough } from 'stream';\nimport * as getStream from 'get-stream';\nimport { once } from 'lodash';\n\nconst xfs = new NodeFS(fs);\n\ntype TestExecReturn = {\n  stdout: string;\n  stderr: string;\n  err: null | ExecException;\n};\nfunction exec(\n  cmd: string,\n  opts: ExecOptions = {}\n): Promise<TestExecReturn> & { child: ChildProcess } {\n  let childProcess!: ChildProcess;\n  return Object.assign(\n    new Promise<TestExecReturn>((resolve, reject) => {\n      childProcess = childProcessExec(\n        cmd,\n        {\n          cwd: TEST_DIR,\n          ...opts,\n        },\n        (error, stdout, stderr) => {\n          resolve({ err: error, stdout, stderr });\n        }\n      );\n    }),\n    {\n      child: childProcess,\n    }\n  );\n}\n\nconst ROOT_DIR = resolve(__dirname, '../..');\nconst DIST_DIR = resolve(__dirname, '..');\nconst TEST_DIR = join(__dirname, '../../tests');\nconst PROJECT = join(TEST_DIR, 'tsconfig.json');\nconst BIN_PATH = join(TEST_DIR, 'node_modules/.bin/ts-node');\nconst BIN_SCRIPT_PATH = join(TEST_DIR, 'node_modules/.bin/ts-node-script');\nconst BIN_CWD_PATH = join(TEST_DIR, 'node_modules/.bin/ts-node-cwd');\n\nconst SOURCE_MAP_REGEXP = /\\/\\/# sourceMappingURL=data:application\\/json;charset=utf\\-8;base64,[\\w\\+]+=*$/;\n\n// `createRequire` does not exist on older node versions\nconst testsDirRequire = createRequire(join(TEST_DIR, 'index.js'));\n\n// Set after ts-node is installed locally\nlet { register, create, VERSION, createRepl }: typeof tsNodeTypes = {} as any;\n\n// Pack and install ts-node locally, necessary to test package \"exports\"\ntest.beforeAll(async () => {\n  rimrafSync(join(TEST_DIR, 'node_modules'));\n  await promisify(childProcessExec)(`npm install`, { cwd: TEST_DIR });\n  const packageLockPath = join(TEST_DIR, 'package-lock.json');\n  existsSync(packageLockPath) && unlinkSync(packageLockPath);\n  ({ register, create, VERSION, createRepl } = testsDirRequire('ts-node'));\n});\n\ntest.suite('ts-node', (test) => {\n  const cmd = `\"${BIN_PATH}\" --project \"${PROJECT}\"`;\n  const cmdNoProject = `\"${BIN_PATH}\"`;\n\n  test('should export the correct version', () => {\n    expect(VERSION).to.equal(require('../../package.json').version);\n  });\n  test('should export all CJS entrypoints', () => {\n    // Ensure our package.json \"exports\" declaration allows `require()`ing all our entrypoints\n    // https://github.com/TypeStrong/ts-node/pull/1026\n\n    testsDirRequire.resolve('ts-node');\n\n    // only reliably way to ask node for the root path of a dependency is Path.resolve(require.resolve('ts-node/package'), '..')\n    testsDirRequire.resolve('ts-node/package');\n    testsDirRequire.resolve('ts-node/package.json');\n\n    // All bin entrypoints for people who need to augment our CLI: `node -r otherstuff ./node_modules/ts-node/dist/bin`\n    testsDirRequire.resolve('ts-node/dist/bin');\n    testsDirRequire.resolve('ts-node/dist/bin.js');\n    testsDirRequire.resolve('ts-node/dist/bin-transpile');\n    testsDirRequire.resolve('ts-node/dist/bin-transpile.js');\n    testsDirRequire.resolve('ts-node/dist/bin-script');\n    testsDirRequire.resolve('ts-node/dist/bin-script.js');\n    testsDirRequire.resolve('ts-node/dist/bin-cwd');\n    testsDirRequire.resolve('ts-node/dist/bin-cwd.js');\n\n    // Must be `require()`able obviously\n    testsDirRequire.resolve('ts-node/register');\n    testsDirRequire.resolve('ts-node/register/files');\n    testsDirRequire.resolve('ts-node/register/transpile-only');\n    testsDirRequire.resolve('ts-node/register/type-check');\n\n    // `node --loader ts-node/esm`\n    testsDirRequire.resolve('ts-node/esm');\n    testsDirRequire.resolve('ts-node/esm.mjs');\n    testsDirRequire.resolve('ts-node/esm/transpile-only');\n    testsDirRequire.resolve('ts-node/esm/transpile-only.mjs');\n\n    testsDirRequire.resolve('ts-node/transpilers/swc-experimental');\n\n    testsDirRequire.resolve('ts-node/node10/tsconfig.json');\n    testsDirRequire.resolve('ts-node/node12/tsconfig.json');\n    testsDirRequire.resolve('ts-node/node14/tsconfig.json');\n    testsDirRequire.resolve('ts-node/node16/tsconfig.json');\n  });\n\n  test.suite('cli', (test) => {\n    test('should execute cli', async () => {\n      const { err, stdout } = await exec(`${cmd} hello-world`);\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, world!\\n');\n    });\n\n    test('shows usage via --help', async () => {\n      const { err, stdout } = await exec(`${cmdNoProject} --help`);\n      expect(err).to.equal(null);\n      expect(stdout).to.match(/Usage: ts-node /);\n    });\n    test('shows version via -v', async () => {\n      const { err, stdout } = await exec(`${cmdNoProject} -v`);\n      expect(err).to.equal(null);\n      expect(stdout.trim()).to.equal(\n        'v' + testsDirRequire('ts-node/package').version\n      );\n    });\n    test('shows version of compiler via -vv', async () => {\n      const { err, stdout } = await exec(`${cmdNoProject} -vv`);\n      expect(err).to.equal(null);\n      expect(stdout.trim()).to.equal(\n        `ts-node v${testsDirRequire('ts-node/package').version}\\n` +\n          `node ${process.version}\\n` +\n          `compiler v${testsDirRequire('typescript/package').version}`\n      );\n    });\n\n    test('should register via cli', async () => {\n      const { err, stdout } = await exec(\n        `node -r ts-node/register hello-world.ts`,\n        {\n          cwd: TEST_DIR,\n        }\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, world!\\n');\n    });\n\n    test('should execute cli with absolute path', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} \"${join(TEST_DIR, 'hello-world')}\"`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, world!\\n');\n    });\n\n    test('should print scripts', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} -pe \"import { example } from './complex/index';example()\"`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('example\\n');\n    });\n\n    test('should provide registered information globally', async () => {\n      const { err, stdout } = await exec(`${cmd} env`);\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('object\\n');\n    });\n\n    test('should provide registered information on register', async () => {\n      const { err, stdout } = await exec(`node -r ts-node/register env.ts`, {\n        cwd: TEST_DIR,\n      });\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('object\\n');\n    });\n\n    if (semver.gte(ts.version, '1.8.0')) {\n      test('should allow js', async () => {\n        const { err, stdout } = await exec(\n          [\n            cmd,\n            '-O \"{\\\\\"allowJs\\\\\":true}\"',\n            '-pe \"import { main } from \\'./allow-js/run\\';main()\"',\n          ].join(' ')\n        );\n        expect(err).to.equal(null);\n        expect(stdout).to.equal('hello world\\n');\n      });\n\n      test('should include jsx when `allow-js` true', async () => {\n        const { err, stdout } = await exec(\n          [\n            cmd,\n            '-O \"{\\\\\"allowJs\\\\\":true}\"',\n            '-pe \"import { Foo2 } from \\'./allow-js/with-jsx\\'; Foo2.sayHi()\"',\n          ].join(' ')\n        );\n        expect(err).to.equal(null);\n        expect(stdout).to.equal('hello world\\n');\n      });\n    }\n\n    test('should eval code', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} -e \"import * as m from './module';console.log(m.example('test'))\"`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('TEST\\n');\n    });\n\n    test('should import empty files', async () => {\n      const { err, stdout } = await exec(`${cmd} -e \"import './empty'\"`);\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('');\n    });\n\n    test('should throw errors', async () => {\n      const { err } = await exec(\n        `${cmd} -e \"import * as m from './module';console.log(m.example(123))\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.match(\n        new RegExp(\n          \"TS2345: Argument of type '(?:number|123)' \" +\n            \"is not assignable to parameter of type 'string'\\\\.\"\n        )\n      );\n    });\n\n    test('should be able to ignore diagnostic', async () => {\n      const { err } = await exec(\n        `${cmd} --ignore-diagnostics 2345 -e \"import * as m from './module';console.log(m.example(123))\"`\n      );\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.match(\n        /TypeError: (?:(?:undefined|foo\\.toUpperCase) is not a function|.*has no method \\'toUpperCase\\')/\n      );\n    });\n\n    test('should work with source maps', async () => {\n      const { err } = await exec(`${cmd} \"throw error\"`);\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.contain(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should work with source maps in --transpile-only mode', async () => {\n      const { err } = await exec(`${cmd} --transpile-only \"throw error\"`);\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.contain(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('eval should work with source maps', async () => {\n      const { err } = await exec(`${cmd} -pe \"import './throw error'\"`);\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.contain(\n        [\n          `${join(TEST_DIR, 'throw error.ts')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n        ].join('\\n')\n      );\n    });\n\n    test('should support transpile only mode', async () => {\n      const { err } = await exec(`${cmd} --transpile-only -pe \"x\"`);\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.contain('ReferenceError: x is not defined');\n    });\n\n    test('should throw error even in transpileOnly mode', async () => {\n      const { err } = await exec(`${cmd} --transpile-only -pe \"console.\"`);\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).to.contain('error TS1003: Identifier expected');\n    });\n\n    test('should support third-party transpilers via --transpiler', async () => {\n      const { err, stdout } = await exec(\n        `${cmdNoProject} --transpiler ts-node/transpilers/swc-experimental transpile-only-swc`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.contain('Hello World!');\n    });\n\n    test('should support third-party transpilers via tsconfig', async () => {\n      const { err, stdout } = await exec(\n        `${cmdNoProject} transpile-only-swc-via-tsconfig`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.contain('Hello World!');\n    });\n\n    test('should pipe into `ts-node` and evaluate', async () => {\n      const execPromise = exec(cmd);\n      execPromise.child.stdin!.end(\"console.log('hello')\");\n      const { err, stdout } = await execPromise;\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('hello\\n');\n    });\n\n    test('should pipe into `ts-node`', async () => {\n      const execPromise = exec(`${cmd} -p`);\n      execPromise.child.stdin!.end('true');\n      const { err, stdout } = await execPromise;\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('true\\n');\n    });\n\n    test('should pipe into an eval script', async () => {\n      const execPromise = exec(\n        `${cmd} --transpile-only -pe \"process.stdin.isTTY\"`\n      );\n      execPromise.child.stdin!.end('true');\n      const { err, stdout } = await execPromise;\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('undefined\\n');\n    });\n\n    test('should run REPL when --interactive passed and stdin is not a TTY', async () => {\n      const execPromise = exec(`${cmd} --interactive`);\n      execPromise.child.stdin!.end('console.log(\"123\")\\n');\n      const { err, stdout } = await execPromise;\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('> 123\\n' + 'undefined\\n' + '> ');\n    });\n\n    test('REPL has command to get type information', async () => {\n      const execPromise = exec(`${cmd} --interactive`);\n      execPromise.child.stdin!.end('\\nconst a = 123\\n.type a');\n      const { err, stdout } = await execPromise;\n      expect(err).to.equal(null);\n      expect(stdout).to.equal(\n        \"> 'use strict'\\n\" + '> undefined\\n' + '> const a: 123\\n' + '> '\n      );\n    });\n\n    // Serial because it's timing-sensitive\n    test.serial('REPL can be created via API', async () => {\n      const stdin = new PassThrough();\n      const stdout = new PassThrough();\n      const stderr = new PassThrough();\n      const replService = createRepl({\n        stdin,\n        stdout,\n        stderr,\n      });\n      const service = create({\n        ...replService.evalAwarePartialHost,\n        project: `${TEST_DIR}/tsconfig.json`,\n      });\n      replService.setService(service);\n      replService.start();\n      stdin.write('\\nconst a = 123\\n.type a\\n');\n      stdin.end();\n      await promisify(setTimeout)(1e3);\n      stdout.end();\n      stderr.end();\n      expect(await getStream(stderr)).to.equal('');\n      expect(await getStream(stdout)).to.equal(\n        \"> 'use strict'\\n\" + '> undefined\\n' + '> const a: 123\\n' + '> '\n      );\n    });\n\n    test('should support require flags', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} -r ./hello-world -pe \"console.log('success')\"`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, world!\\nsuccess\\nundefined\\n');\n    });\n\n    test('should support require from node modules', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} -r typescript -e \"console.log('success')\"`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('success\\n');\n    });\n\n    test('should use source maps with react tsx', async () => {\n      const { err, stdout } = await exec(`${cmd} \"throw error react tsx.tsx\"`);\n      expect(err).not.to.equal(null);\n      expect(err!.message).to.contain(\n        [\n          `${join(TEST_DIR, './throw error react tsx.tsx')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should use source maps with react tsx in --transpile-only mode', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} --transpile-only \"throw error react tsx.tsx\"`\n      );\n      expect(err).not.to.equal(null);\n      expect(err!.message).to.contain(\n        [\n          `${join(TEST_DIR, './throw error react tsx.tsx')}:100`,\n          \"  bar() { throw new Error('this is a demo'); }\",\n          '                ^',\n          'Error: this is a demo',\n        ].join('\\n')\n      );\n    });\n\n    test('should allow custom typings', async () => {\n      const { err, stdout } = await exec(`${cmd} custom-types`);\n      expect(err).to.match(/Error: Cannot find module 'does-not-exist'/);\n    });\n\n    test('should preserve `ts-node` context with child process', async () => {\n      const { err, stdout } = await exec(`${cmd} child-process`);\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, world!\\n');\n    });\n\n    test('should import js before ts by default', async () => {\n      const { err, stdout } = await exec(`${cmd} import-order/compiled`);\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, JavaScript!\\n');\n    });\n\n    const preferTsExtsEntrypoint = semver.gte(process.version, '12.0.0')\n      ? 'import-order/compiled'\n      : 'import-order/require-compiled';\n    test('should import ts before js when --prefer-ts-exts flag is present', async () => {\n      const { err, stdout } = await exec(\n        `${cmd} --prefer-ts-exts ${preferTsExtsEntrypoint}`\n      );\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, TypeScript!\\n');\n    });\n\n    test('should import ts before js when TS_NODE_PREFER_TS_EXTS env is present', async () => {\n      const { err, stdout } = await exec(`${cmd} ${preferTsExtsEntrypoint}`, {\n        env: { ...process.env, TS_NODE_PREFER_TS_EXTS: 'true' },\n      });\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, TypeScript!\\n');\n    });\n\n    test('should ignore .d.ts files', async () => {\n      const { err, stdout } = await exec(`${cmd} import-order/importer`);\n      expect(err).to.equal(null);\n      expect(stdout).to.equal('Hello, World!\\n');\n    });\n\n    test.suite('issue #884', (test) => {\n      test('should compile', async (t) => {\n        // TODO disabled because it consistently fails on Windows on TS 2.7\n        if (\n          process.platform === 'win32' &&\n          semver.satisfies(ts.version, '2.7')\n        ) {\n          t.log('Skipping');\n          return;\n        } else {\n          const { err, stdout } = await exec(\n            `\"${BIN_PATH}\" --project issue-884/tsconfig.json issue-884`\n          );\n          expect(err).to.equal(null);\n          expect(stdout).to.equal('');\n        }\n      });\n    });\n\n    test.suite('issue #986', (test) => {\n      test('should not compile', async () => {\n        const { err, stdout, stderr } = await exec(\n          `\"${BIN_PATH}\" --project issue-986/tsconfig.json issue-986`\n        );\n        expect(err).not.to.equal(null);\n        expect(stderr).to.contain(\"Cannot find name 'TEST'\"); // TypeScript error.\n        expect(stdout).to.equal('');\n      });\n\n      test('should compile with `--files`', async () => {\n        const { err, stdout, stderr } = await exec(\n          `\"${BIN_PATH}\" --files --project issue-986/tsconfig.json issue-986`\n        );\n        expect(err).not.to.equal(null);\n        expect(stderr).to.contain('ReferenceError: TEST is not defined'); // Runtime error.\n        expect(stdout).to.equal('');\n      });\n    });\n\n    if (semver.gte(ts.version, '2.7.0')) {\n      test('should locate tsconfig relative to entry-point by default', async () => {\n        const { err, stdout } = await exec(`${BIN_PATH} ../a/index`, {\n          cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.match(/plugin-a/);\n      });\n      test('should locate tsconfig relative to entry-point via ts-node-script', async () => {\n        const { err, stdout } = await exec(`${BIN_SCRIPT_PATH} ../a/index`, {\n          cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.match(/plugin-a/);\n      });\n      test('should locate tsconfig relative to entry-point with --script-mode', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_PATH} --script-mode ../a/index`,\n          {\n            cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n          }\n        );\n        expect(err).to.equal(null);\n        expect(stdout).to.match(/plugin-a/);\n      });\n      test('should locate tsconfig relative to cwd via ts-node-cwd', async () => {\n        const { err, stdout } = await exec(`${BIN_CWD_PATH} ../a/index`, {\n          cwd: join(TEST_DIR, 'cwd-and-script-mode/b'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.match(/plugin-b/);\n      });\n      test('should locate tsconfig relative to cwd in --cwd-mode', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_PATH} --cwd-mode ../a/index`,\n          { cwd: join(TEST_DIR, 'cwd-and-script-mode/b') }\n        );\n        expect(err).to.equal(null);\n        expect(stdout).to.match(/plugin-b/);\n      });\n      test('should locate tsconfig relative to realpath, not symlink, when entrypoint is a symlink', async (t) => {\n        if (\n          lstatSync(\n            join(TEST_DIR, 'main-realpath/symlink/symlink.tsx')\n          ).isSymbolicLink()\n        ) {\n          const { err, stdout } = await exec(\n            `${BIN_PATH} main-realpath/symlink/symlink.tsx`\n          );\n          expect(err).to.equal(null);\n          expect(stdout).to.equal('');\n        } else {\n          t.log('Skipping');\n          return;\n        }\n      });\n    }\n\n    test.suite('should read ts-node options from tsconfig.json', (test) => {\n      const BIN_EXEC = `\"${BIN_PATH}\" --project tsconfig-options/tsconfig.json`;\n\n      test('should override compiler options from env', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`,\n          {\n            env: {\n              ...process.env,\n              TS_NODE_COMPILER_OPTIONS: '{\"typeRoots\": [\"env-typeroots\"]}',\n            },\n          }\n        );\n        expect(err).to.equal(null);\n        const { config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/env-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n      });\n\n      test('should use options from `tsconfig.json`', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`\n        );\n        expect(err).to.equal(null);\n        const { options, config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n        expect(config.options.types).to.deep.equal(['tsconfig-tsnode-types']);\n        expect(options.pretty).to.equal(undefined);\n        expect(options.skipIgnore).to.equal(false);\n        expect(options.transpileOnly).to.equal(true);\n        expect(options.require).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/required1.js'),\n        ]);\n      });\n\n      test('should have flags override / merge with `tsconfig.json`', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} --skip-ignore --compiler-options \"{\\\\\"types\\\\\":[\\\\\"flags-types\\\\\"]}\" --require ./tsconfig-options/required2.js tsconfig-options/log-options2.js`\n        );\n        expect(err).to.equal(null);\n        const { options, config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n        expect(config.options.types).to.deep.equal(['flags-types']);\n        expect(options.pretty).to.equal(undefined);\n        expect(options.skipIgnore).to.equal(true);\n        expect(options.transpileOnly).to.equal(true);\n        expect(options.require).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/required1.js'),\n          './tsconfig-options/required2.js',\n        ]);\n      });\n\n      test('should have `tsconfig.json` override environment', async () => {\n        const { err, stdout } = await exec(\n          `${BIN_EXEC} tsconfig-options/log-options1.js`,\n          {\n            env: {\n              ...process.env,\n              TS_NODE_PRETTY: 'true',\n              TS_NODE_SKIP_IGNORE: 'true',\n            },\n          }\n        );\n        expect(err).to.equal(null);\n        const { options, config } = JSON.parse(stdout);\n        expect(config.options.typeRoots).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/tsconfig-typeroots').replace(\n            /\\\\/g,\n            '/'\n          ),\n        ]);\n        expect(config.options.types).to.deep.equal(['tsconfig-tsnode-types']);\n        expect(options.pretty).to.equal(true);\n        expect(options.skipIgnore).to.equal(false);\n        expect(options.transpileOnly).to.equal(true);\n        expect(options.require).to.deep.equal([\n          join(TEST_DIR, './tsconfig-options/required1.js'),\n        ]);\n      });\n    });\n\n    test.suite(\n      'should use implicit @tsconfig/bases config when one is not loaded from disk',\n      (_test) => {\n        const test = _test.context(async (t) => ({\n          tempDir: mkdtempSync(join(tmpdir(), 'ts-node-spec')),\n        }));\n        if (\n          semver.gte(ts.version, '3.5.0') &&\n          semver.gte(process.versions.node, '14.0.0')\n        ) {\n          test('implicitly uses @tsconfig/node14 or @tsconfig/node16 compilerOptions when both TS and node versions support it', async (t) => {\n            // node14 and node16 configs are identical, hence the \"or\"\n            const {\n              context: { tempDir },\n            } = t;\n            const {\n              err: err1,\n              stdout: stdout1,\n              stderr: stderr1,\n            } = await exec(`${BIN_PATH} --showConfig`, { cwd: tempDir });\n            expect(err1).to.equal(null);\n            t.like(JSON.parse(stdout1), {\n              compilerOptions: {\n                target: 'es2020',\n                lib: ['es2020'],\n              },\n            });\n            const {\n              err: err2,\n              stdout: stdout2,\n              stderr: stderr2,\n            } = await exec(`${BIN_PATH} -pe 10n`, { cwd: tempDir });\n            expect(err2).to.equal(null);\n            expect(stdout2).to.equal('10n\\n');\n          });\n        } else {\n          test('implicitly uses @tsconfig/* lower than node14 (node12) when either TS or node versions do not support @tsconfig/node14', async ({\n            context: { tempDir },\n          }) => {\n            const { err, stdout, stderr } = await exec(`${BIN_PATH} -pe 10n`, {\n              cwd: tempDir,\n            });\n            expect(err).to.not.equal(null);\n            expect(stderr).to.match(\n              /BigInt literals are not available when targeting lower than|error TS2304: Cannot find name 'n'/\n            );\n          });\n        }\n        test('implicitly loads @types/node even when not installed within local directory', async ({\n          context: { tempDir },\n        }) => {\n          const { err, stdout, stderr } = await exec(\n            `${BIN_PATH} -pe process.env.foo`,\n            {\n              cwd: tempDir,\n              env: { ...process.env, foo: 'hello world' },\n            }\n          );\n          expect(err).to.equal(null);\n          expect(stdout).to.equal('hello world\\n');\n        });\n        test('implicitly loads local @types/node', async ({\n          context: { tempDir },\n        }) => {\n          await xfs.copyPromise(\n            npath.toPortablePath(tempDir),\n            npath.toPortablePath(join(TEST_DIR, 'local-types-node'))\n          );\n          const { err, stdout, stderr } = await exec(\n            `${BIN_PATH} -pe process.env.foo`,\n            {\n              cwd: tempDir,\n              env: { ...process.env, foo: 'hello world' },\n            }\n          );\n          expect(err).to.not.equal(null);\n          expect(stderr).to.contain(\n            \"Property 'env' does not exist on type 'LocalNodeTypes_Process'\"\n          );\n        });\n      }\n    );\n\n    if (semver.gte(ts.version, '3.2.0')) {\n      test.suite(\n        'should bundle @tsconfig/bases to be used in your own tsconfigs',\n        (test) => {\n          const macro = test.macro((nodeVersion: string) => async (t) => {\n            const config = require(`@tsconfig/${nodeVersion}/tsconfig.json`);\n            const { err, stdout, stderr } = await exec(\n              `${BIN_PATH} --showConfig -e 10n`,\n              {\n                cwd: join(TEST_DIR, 'tsconfig-bases', nodeVersion),\n              }\n            );\n            expect(err).to.equal(null);\n            t.like(JSON.parse(stdout), {\n              compilerOptions: {\n                target: config.compilerOptions.target,\n                lib: config.compilerOptions.lib,\n              },\n            });\n          });\n          test(`ts-node/node10/tsconfig.json`, macro, 'node10');\n          test(`ts-node/node12/tsconfig.json`, macro, 'node12');\n          test(`ts-node/node14/tsconfig.json`, macro, 'node14');\n          test(`ts-node/node16/tsconfig.json`, macro, 'node16');\n        }\n      );\n    }\n\n    test.suite('compiler host', (test) => {\n      test('should execute cli', async () => {\n        const { err, stdout } = await exec(\n          `${cmd} --compiler-host hello-world`\n        );\n        expect(err).to.equal(null);\n        expect(stdout).to.equal('Hello, world!\\n');\n      });\n    });\n\n    test('should transpile files inside a node_modules directory when not ignored', async () => {\n      const { err, stdout, stderr } = await exec(\n        `${cmdNoProject} from-node-modules/from-node-modules`\n      );\n      if (err)\n        throw new Error(\n          `Unexpected error: ${err}\\nstdout:\\n${stdout}\\nstderr:\\n${stderr}`\n        );\n      expect(JSON.parse(stdout)).to.deep.equal({\n        external: {\n          tsmri: { name: 'typescript-module-required-internally' },\n          jsmri: { name: 'javascript-module-required-internally' },\n          tsmii: { name: 'typescript-module-imported-internally' },\n          jsmii: { name: 'javascript-module-imported-internally' },\n        },\n        tsmie: { name: 'typescript-module-imported-externally' },\n        jsmie: { name: 'javascript-module-imported-externally' },\n        tsmre: { name: 'typescript-module-required-externally' },\n        jsmre: { name: 'javascript-module-required-externally' },\n      });\n    });\n\n    test.suite('should respect maxNodeModulesJsDepth', (test) => {\n      test('for unscoped modules', async () => {\n        const { err, stdout, stderr } = await exec(\n          `${cmdNoProject} maxnodemodulesjsdepth`\n        );\n        expect(err).to.not.equal(null);\n        expect(stderr.replace(/\\r\\n/g, '\\n')).to.contain(\n          'TSError: ⨯ Unable to compile TypeScript:\\n' +\n            \"maxnodemodulesjsdepth/other.ts(4,7): error TS2322: Type 'string' is not assignable to type 'boolean'.\\n\" +\n            '\\n'\n        );\n      });\n\n      test('for @scoped modules', async () => {\n        const { err, stdout, stderr } = await exec(\n          `${cmdNoProject} maxnodemodulesjsdepth-scoped`\n        );\n        expect(err).to.not.equal(null);\n        expect(stderr.replace(/\\r\\n/g, '\\n')).to.contain(\n          'TSError: ⨯ Unable to compile TypeScript:\\n' +\n            \"maxnodemodulesjsdepth-scoped/other.ts(7,7): error TS2322: Type 'string' is not assignable to type 'boolean'.\\n\" +\n            '\\n'\n        );\n      });\n    });\n\n    if (semver.gte(ts.version, '3.2.0')) {\n      test('--show-config should log resolved configuration', async (t) => {\n        function native(path: string) {\n          return path.replace(/\\/|\\\\/g, pathSep);\n        }\n        function posix(path: string) {\n          return path.replace(/\\/|\\\\/g, '/');\n        }\n        const { err, stdout } = await exec(`${cmd} --showConfig`);\n        expect(err).to.equal(null);\n        t.is(\n          stdout,\n          JSON.stringify(\n            {\n              compilerOptions: {\n                target: 'es6',\n                jsx: 'react',\n                noEmit: false,\n                strict: true,\n                typeRoots: [\n                  posix(`${ROOT_DIR}/tests/typings`),\n                  posix(`${ROOT_DIR}/node_modules/@types`),\n                ],\n                sourceMap: true,\n                inlineSourceMap: false,\n                inlineSources: true,\n                declaration: false,\n                outDir: './.ts-node',\n                module: 'commonjs',\n              },\n              'ts-node': {\n                cwd: native(`${ROOT_DIR}/tests`),\n                projectSearchDir: native(`${ROOT_DIR}/tests`),\n                project: native(`${ROOT_DIR}/tests/tsconfig.json`),\n                require: [],\n              },\n            },\n            null,\n            2\n          ) + '\\n'\n        );\n      });\n    } else {\n      test('--show-config should log error message when used with old typescript versions', async (t) => {\n        const { err, stderr } = await exec(`${cmd} --showConfig`);\n        expect(err).to.not.equal(null);\n        expect(stderr).to.contain('Error: --show-config requires');\n      });\n    }\n  });\n\n  test.suite('register', (_test) => {\n    const test = _test.context(\n      once(async () => {\n        return {\n          registered: register({\n            project: PROJECT,\n            compilerOptions: {\n              jsx: 'preserve',\n            },\n          }),\n          moduleTestPath: require.resolve('../../tests/module'),\n        };\n      })\n    );\n    test.beforeEach(async ({ context: { registered } }) => {\n      // Re-enable project for every test.\n      registered.enabled(true);\n    });\n    test.runSerially();\n\n    test('should be able to require typescript', ({\n      context: { moduleTestPath },\n    }) => {\n      const m = require(moduleTestPath);\n\n      expect(m.example('foo')).to.equal('FOO');\n    });\n\n    test('should support dynamically disabling', ({\n      context: { registered, moduleTestPath },\n    }) => {\n      delete require.cache[moduleTestPath];\n\n      expect(registered.enabled(false)).to.equal(false);\n      expect(() => require(moduleTestPath)).to.throw(/Unexpected token/);\n\n      delete require.cache[moduleTestPath];\n\n      expect(registered.enabled()).to.equal(false);\n      expect(() => require(moduleTestPath)).to.throw(/Unexpected token/);\n\n      delete require.cache[moduleTestPath];\n\n      expect(registered.enabled(true)).to.equal(true);\n      expect(() => require(moduleTestPath)).to.not.throw();\n\n      delete require.cache[moduleTestPath];\n\n      expect(registered.enabled()).to.equal(true);\n      expect(() => require(moduleTestPath)).to.not.throw();\n    });\n\n    if (semver.gte(ts.version, '2.7.0')) {\n      test('should support compiler scopes', ({\n        context: { registered, moduleTestPath },\n      }) => {\n        const calls: string[] = [];\n\n        registered.enabled(false);\n\n        const compilers = [\n          register({\n            projectSearchDir: join(TEST_DIR, 'scope/a'),\n            scopeDir: join(TEST_DIR, 'scope/a'),\n            scope: true,\n          }),\n          register({\n            projectSearchDir: join(TEST_DIR, 'scope/a'),\n            scopeDir: join(TEST_DIR, 'scope/b'),\n            scope: true,\n          }),\n        ];\n\n        compilers.forEach((c) => {\n          const old = c.compile;\n          c.compile = (code, fileName, lineOffset) => {\n            calls.push(fileName);\n\n            return old(code, fileName, lineOffset);\n          };\n        });\n\n        try {\n          expect(require('../../tests/scope/a').ext).to.equal('.ts');\n          expect(require('../../tests/scope/b').ext).to.equal('.ts');\n        } finally {\n          compilers.forEach((c) => c.enabled(false));\n        }\n\n        expect(calls).to.deep.equal([\n          join(TEST_DIR, 'scope/a/index.ts'),\n          join(TEST_DIR, 'scope/b/index.ts'),\n        ]);\n\n        delete require.cache[moduleTestPath];\n\n        expect(() => require(moduleTestPath)).to.throw();\n      });\n    }\n\n    test('should compile through js and ts', () => {\n      const m = require('../../tests/complex');\n\n      expect(m.example()).to.equal('example');\n    });\n\n    test('should work with proxyquire', () => {\n      const m = proxyquire('../../tests/complex', {\n        './example': 'hello',\n      });\n\n      expect(m.example()).to.equal('hello');\n    });\n\n    test('should work with `require.cache`', () => {\n      const { example1, example2 } = require('../../tests/require-cache');\n\n      expect(example1).to.not.equal(example2);\n    });\n\n    test('should use source maps', async () => {\n      try {\n        require('../../tests/throw error');\n      } catch (error) {\n        expect(error.stack).to.contain(\n          [\n            'Error: this is a demo',\n            `    at Foo.bar (${join(TEST_DIR, './throw error.ts')}:100:17)`,\n          ].join('\\n')\n        );\n      }\n    });\n\n    test.suite('JSX preserve', (test) => {\n      let old: (m: Module, filename: string) => any;\n      let compiled: string;\n\n      test.runSerially();\n      test.beforeAll(async () => {\n        old = require.extensions['.tsx']!;\n        require.extensions['.tsx'] = (m: any, fileName) => {\n          const _compile = m._compile;\n\n          m._compile = function (code: string, fileName: string) {\n            compiled = code;\n            return _compile.call(this, code, fileName);\n          };\n\n          return old(m, fileName);\n        };\n      });\n\n      test('should use source maps', async (t) => {\n        t.teardown(() => {\n          require.extensions['.tsx'] = old;\n        });\n        try {\n          require('../../tests/with-jsx.tsx');\n        } catch (error) {\n          expect(error.stack).to.contain('SyntaxError: Unexpected token');\n        }\n\n        expect(compiled).to.match(SOURCE_MAP_REGEXP);\n      });\n    });\n  });\n\n  test.suite('create', (_test) => {\n    const test = _test.context(async (t) => {\n      return {\n        service: create({\n          compilerOptions: { target: 'es5' },\n          skipProject: true,\n        }),\n      };\n    });\n\n    test('should create generic compiler instances', ({\n      context: { service },\n    }) => {\n      const output = service.compile('const x = 10', 'test.ts');\n      expect(output).to.contain('var x = 10;');\n    });\n\n    test.suite('should get type information', (test) => {\n      test('given position of identifier', ({ context: { service } }) => {\n        expect(\n          service.getTypeInfo('/**jsdoc here*/const x = 10', 'test.ts', 21)\n        ).to.deep.equal({\n          comment: 'jsdoc here',\n          name: 'const x: 10',\n        });\n      });\n      test('given position that does not point to an identifier', ({\n        context: { service },\n      }) => {\n        expect(\n          service.getTypeInfo('/**jsdoc here*/const x = 10', 'test.ts', 0)\n        ).to.deep.equal({\n          comment: '',\n          name: '',\n        });\n      });\n    });\n  });\n\n  test.suite('issue #1098', (test) => {\n    function testIgnored(\n      ignored: tsNodeTypes.Service['ignored'],\n      allowed: string[],\n      disallowed: string[]\n    ) {\n      for (const ext of allowed) {\n        expect(ignored(join(DIST_DIR, `index${ext}`))).equal(\n          false,\n          `should accept ${ext} files`\n        );\n      }\n      for (const ext of disallowed) {\n        expect(ignored(join(DIST_DIR, `index${ext}`))).equal(\n          true,\n          `should ignore ${ext} files`\n        );\n      }\n    }\n\n    test('correctly filters file extensions from the compiler when allowJs=false and jsx=false', () => {\n      const { ignored } = create({ compilerOptions: {}, skipProject: true });\n      testIgnored(\n        ignored,\n        ['.ts', '.d.ts'],\n        ['.js', '.tsx', '.jsx', '.mjs', '.cjs', '.xyz', '']\n      );\n    });\n    test('correctly filters file extensions from the compiler when allowJs=true and jsx=false', () => {\n      const { ignored } = create({\n        compilerOptions: { allowJs: true },\n        skipProject: true,\n      });\n      testIgnored(\n        ignored,\n        ['.ts', '.js', '.d.ts'],\n        ['.tsx', '.jsx', '.mjs', '.cjs', '.xyz', '']\n      );\n    });\n    test('correctly filters file extensions from the compiler when allowJs=false and jsx=true', () => {\n      const { ignored } = create({\n        compilerOptions: { allowJs: false, jsx: 'preserve' },\n        skipProject: true,\n      });\n      testIgnored(\n        ignored,\n        ['.ts', '.tsx', '.d.ts'],\n        ['.js', '.jsx', '.mjs', '.cjs', '.xyz', '']\n      );\n    });\n    test('correctly filters file extensions from the compiler when allowJs=true and jsx=true', () => {\n      const { ignored } = create({\n        compilerOptions: { allowJs: true, jsx: 'preserve' },\n        skipProject: true,\n      });\n      testIgnored(\n        ignored,\n        ['.ts', '.tsx', '.js', '.jsx', '.d.ts'],\n        ['.mjs', '.cjs', '.xyz', '']\n      );\n    });\n  });\n\n  test.suite('esm', (test) => {\n    const experimentalModulesFlag = semver.gte(process.version, '12.17.0')\n      ? ''\n      : '--experimental-modules';\n    const cmd = `node ${experimentalModulesFlag} --loader ts-node/esm`;\n\n    if (semver.gte(process.version, '12.16.0')) {\n      test('should compile and execute as ESM', async () => {\n        const { err, stdout } = await exec(`${cmd} index.ts`, {\n          cwd: join(TEST_DIR, './esm'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.equal('foo bar baz biff libfoo\\n');\n      });\n      test('should use source maps', async () => {\n        const { err, stdout } = await exec(`${cmd} \"throw error.ts\"`, {\n          cwd: join(TEST_DIR, './esm'),\n        });\n        expect(err).not.to.equal(null);\n        expect(err!.message).to.contain(\n          [\n            `${pathToFileURL(join(TEST_DIR, './esm/throw error.ts'))\n              .toString()\n              .replace(/%20/g, ' ')}:100`,\n            \"  bar() { throw new Error('this is a demo'); }\",\n            '                ^',\n            'Error: this is a demo',\n          ].join('\\n')\n        );\n      });\n\n      test.suite('supports experimental-specifier-resolution=node', (test) => {\n        test('via --experimental-specifier-resolution', async () => {\n          const {\n            err,\n            stdout,\n          } = await exec(\n            `${cmd} --experimental-specifier-resolution=node index.ts`,\n            { cwd: join(TEST_DIR, './esm-node-resolver') }\n          );\n          expect(err).to.equal(null);\n          expect(stdout).to.equal('foo bar baz biff libfoo\\n');\n        });\n        test('via --es-module-specifier-resolution alias', async () => {\n          const {\n            err,\n            stdout,\n          } = await exec(\n            `${cmd} --experimental-modules --es-module-specifier-resolution=node index.ts`,\n            { cwd: join(TEST_DIR, './esm-node-resolver') }\n          );\n          expect(err).to.equal(null);\n          expect(stdout).to.equal('foo bar baz biff libfoo\\n');\n        });\n        test('via NODE_OPTIONS', async () => {\n          const { err, stdout } = await exec(`${cmd} index.ts`, {\n            cwd: join(TEST_DIR, './esm-node-resolver'),\n            env: {\n              ...process.env,\n              NODE_OPTIONS: `${experimentalModulesFlag} --experimental-specifier-resolution=node`,\n            },\n          });\n          expect(err).to.equal(null);\n          expect(stdout).to.equal('foo bar baz biff libfoo\\n');\n        });\n      });\n\n      test('throws ERR_REQUIRE_ESM when attempting to require() an ESM script when ESM loader is enabled', async () => {\n        const { err, stderr } = await exec(`${cmd} ./index.js`, {\n          cwd: join(TEST_DIR, './esm-err-require-esm'),\n        });\n        expect(err).to.not.equal(null);\n        expect(stderr).to.contain(\n          'Error [ERR_REQUIRE_ESM]: Must use import to load ES Module:'\n        );\n      });\n\n      test('defers to fallback loaders when URL should not be handled by ts-node', async () => {\n        const { err, stdout, stderr } = await exec(`${cmd} index.mjs`, {\n          cwd: join(TEST_DIR, './esm-import-http-url'),\n        });\n        expect(err).to.not.equal(null);\n        // expect error from node's default resolver\n        expect(stderr).to.match(\n          /Error \\[ERR_UNSUPPORTED_ESM_URL_SCHEME\\]:.*(?:\\n.*){0,1}\\n *at defaultResolve/\n        );\n      });\n\n      test('should bypass import cache when changing search params', async () => {\n        const { err, stdout } = await exec(`${cmd} index.ts`, {\n          cwd: join(TEST_DIR, './esm-import-cache'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.equal('log1\\nlog2\\nlog2\\n');\n      });\n\n      test('should support transpile only mode via dedicated loader entrypoint', async () => {\n        const { err, stdout } = await exec(`${cmd}/transpile-only index.ts`, {\n          cwd: join(TEST_DIR, './esm-transpile-only'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.equal('');\n      });\n      test('should throw type errors without transpile-only enabled', async () => {\n        const { err, stdout } = await exec(`${cmd} index.ts`, {\n          cwd: join(TEST_DIR, './esm-transpile-only'),\n        });\n        if (err === null) {\n          throw new Error('Command was expected to fail, but it succeeded.');\n        }\n\n        expect(err.message).to.contain('Unable to compile TypeScript');\n        expect(err.message).to.match(\n          new RegExp(\n            \"TS2345: Argument of type '(?:number|1101)' is not assignable to parameter of type 'string'\\\\.\"\n          )\n        );\n        expect(err.message).to.match(\n          new RegExp(\n            \"TS2322: Type '(?:\\\"hello world\\\"|string)' is not assignable to type 'number'\\\\.\"\n          )\n        );\n        expect(stdout).to.equal('');\n      });\n    }\n\n    if (semver.gte(process.version, '12.0.0')) {\n      test('throws ERR_REQUIRE_ESM when attempting to require() an ESM script when ESM loader is *not* enabled and node version is >= 12', async () => {\n        // Node versions >= 12 support package.json \"type\" field and so will throw an error when attempting to load ESM as CJS\n        const { err, stderr } = await exec(`${BIN_PATH} ./index.js`, {\n          cwd: join(TEST_DIR, './esm-err-require-esm'),\n        });\n        expect(err).to.not.equal(null);\n        expect(stderr).to.contain(\n          'Error [ERR_REQUIRE_ESM]: Must use import to load ES Module:'\n        );\n      });\n    } else {\n      test('Loads as CommonJS when attempting to require() an ESM script when ESM loader is *not* enabled and node version is < 12', async () => {\n        // Node versions less than 12 do not support package.json \"type\" field and so will load ESM as CommonJS\n        const { err, stdout } = await exec(`${BIN_PATH} ./index.js`, {\n          cwd: join(TEST_DIR, './esm-err-require-esm'),\n        });\n        expect(err).to.equal(null);\n        expect(stdout).to.contain('CommonJS');\n      });\n    }\n  });\n});\n"]}