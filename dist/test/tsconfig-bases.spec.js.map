{"version":3,"file":"tsconfig-bases.spec.js","sourceRoot":"","sources":["../../src/test/tsconfig-bases.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport { createExec } from './helpers/exec';\nimport { ctxTmpDirOutsideCheckout } from './helpers/ctx-tmp-dir';\nimport { ctxTsNode } from './helpers/ctx-ts-node';\nimport { BIN_PATH, TEST_DIR } from './helpers/paths';\nimport {\n  tsSupportsEs2021,\n  tsSupportsEs2022,\n  tsSupportsLibEs2023,\n  tsSupportsStableNodeNextNode16,\n} from './helpers/version-checks';\nimport { context, expect } from './testlib';\nimport semver = require('semver');\nimport { testsDirRequire } from './helpers';\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\nconst test = context(ctxTsNode);\n\ntest.suite('should use implicit @tsconfig/bases config when one is not loaded from disk', ({ contextEach }) => {\n  const test = contextEach(ctxTmpDirOutsideCheckout);\n\n  // Expectations change depending on node and TS version, since ts-node picks an implicit config that is compatible\n  // with both.\n  let lib: Array<string> | undefined = undefined;\n  let target: string = 'es5';\n  if (tsSupportsStableNodeNextNode16) {\n    lib = ['es2020'];\n    target = 'es2020';\n    if (semver.gte(process.versions.node, '16.0.0') && tsSupportsEs2021) {\n      lib = ['es2021'];\n      target = 'es2021';\n    }\n    if (semver.gte(process.versions.node, '18.0.0') && tsSupportsEs2022 && tsSupportsLibEs2023) {\n      lib = ['es2023'];\n      target = 'es2022';\n    }\n  }\n\n  test('implicitly uses @tsconfig/node14, @tsconfig/node16, @tsconfig/node18, or @tsconfig/node20 compilerOptions when both TS and node versions support it', async (t) => {\n    const r1 = await exec(`${BIN_PATH} --showConfig`, {\n      cwd: t.context.tmpDir,\n    });\n\n    expect(r1.err).toBe(null);\n    t.like(JSON.parse(r1.stdout), {\n      compilerOptions: {\n        target,\n        lib,\n      },\n    });\n  });\n\n  test('implicitly loads @types/node even when not installed within local directory', async (t) => {\n    const r = await exec(`${BIN_PATH} -pe process.env.foo`, {\n      cwd: t.context.tmpDir,\n      env: { ...process.env, foo: 'hello world' },\n    });\n\n    expect(r.err).toBe(null);\n    expect(r.stdout).toBe('hello world\\n');\n  });\n\n  test('implicitly loads local @types/node', async (t) => {\n    t.context.fixture.readFrom(join(TEST_DIR, 'local-types-node'), undefined, []);\n    t.context.fixture.write();\n\n    const r = await exec(`${BIN_PATH} -pe process.env.foo`, {\n      cwd: t.context.fixture.cwd,\n      env: { ...process.env, foo: 'hello world' },\n    });\n\n    expect(r.err).not.toBe(null);\n    expect(r.stderr).toMatch(\"Property 'env' does not exist on type 'LocalNodeTypes_Process'\");\n  });\n});\n\ntest.suite('should bundle @tsconfig/bases to be used in your own tsconfigs', (test) => {\n  // Older TS versions will complain about newer `target`, `lib`, `module`, `moduleResolution` options\n  test.if(tsSupportsEs2022 && tsSupportsLibEs2023 && tsSupportsStableNodeNextNode16);\n\n  const macro = test.macro((nodeVersion: string) => async (t) => {\n    const config = testsDirRequire(`@tsconfig/${nodeVersion}/tsconfig.json`);\n    const r = await exec(`${BIN_PATH} --showConfig -e 10n`, {\n      cwd: join(TEST_DIR, 'tsconfig-bases', nodeVersion),\n    });\n\n    expect(r.err).toBe(null);\n    t.like(JSON.parse(r.stdout), {\n      compilerOptions: {\n        target: config.compilerOptions.target,\n        lib: config.compilerOptions.lib,\n      },\n    });\n  });\n\n  test(`ts-node/node14/tsconfig.json`, macro, 'node14');\n  test(`ts-node/node16/tsconfig.json`, macro, 'node16');\n  test(`ts-node/node18/tsconfig.json`, macro, 'node18');\n  test(`ts-node/node20/tsconfig.json`, macro, 'node20');\n});\n"]}