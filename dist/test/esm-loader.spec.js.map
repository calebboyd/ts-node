{"version":3,"file":"esm-loader.spec.js","sourceRoot":"","sources":["../../src/test/esm-loader.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// ESM loader hook tests\n// TODO: at the time of writing, other ESM loader hook tests have not been moved into this file.\n// Should consolidate them here.\n\nimport { context } from './testlib';\nimport semver = require('semver');\nimport {\n  BIN_ESM_PATH,\n  BIN_PATH,\n  BIN_PATH_JS,\n  CMD_ESM_LOADER_WITHOUT_PROJECT,\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  ctxTsNode,\n  nodeSupportsImportAssertions,\n  nodeSupportsUnflaggedJsonImports,\n  nodeUsesNewHooksApi,\n  resetNodeEnvironment,\n  TEST_DIR,\n  tsSupportsImportAssertions,\n  createExec,\n  createSpawn,\n  ExecReturn,\n} from './helpers';\nimport { join, resolve } from 'path';\nimport * as expect from 'expect';\nimport type { NodeLoaderHooksAPI2 } from '../';\nimport { pathToFileURL } from 'url';\n\nconst test = context(ctxTsNode);\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\nconst spawn = createSpawn({\n  cwd: TEST_DIR,\n});\n\ntest.suite('esm', (test) => {\n  test('should compile and execute as ESM', async () => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`, {\n      cwd: join(TEST_DIR, './esm'),\n    });\n    expect(r.err).toBe(null);\n    expect(r.stdout).toBe('foo bar baz biff libfoo\\n');\n  });\n  test('should use source maps', async (t) => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} \"throw error.ts\"`, {\n      cwd: join(TEST_DIR, './esm'),\n    });\n    expect(r.err).not.toBe(null);\n    const expectedModuleUrl = pathToFileURL(join(TEST_DIR, './esm/throw error.ts')).toString();\n    expect(r.err!.message).toMatch(\n      [\n        `${expectedModuleUrl}:100`,\n        \"  bar() { throw new Error('this is a demo'); }\",\n        '                ^',\n        'Error: this is a demo',\n        `    at Foo.bar (${expectedModuleUrl}:100:17)`,\n      ].join('\\n')\n    );\n  });\n\n  test.suite('supports experimental-specifier-resolution=node', (test) => {\n    test('via --experimental-specifier-resolution', async () => {\n      const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} --experimental-specifier-resolution=node index.ts`, {\n        cwd: join(TEST_DIR, './esm-node-resolver'),\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('foo bar baz biff libfoo\\n');\n    });\n    test('via NODE_OPTIONS', async () => {\n      const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`, {\n        cwd: join(TEST_DIR, './esm-node-resolver'),\n        env: {\n          ...process.env,\n          NODE_OPTIONS: `--experimental-specifier-resolution=node`,\n        },\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe('foo bar baz biff libfoo\\n');\n    });\n  });\n\n  test('throws ERR_REQUIRE_ESM when attempting to require() an ESM script when ESM loader is enabled', async () => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} ./index.js`, {\n      cwd: join(TEST_DIR, './esm-err-require-esm'),\n    });\n    expect(r.err).not.toBe(null);\n    expect(r.stderr).toMatch('Error [ERR_REQUIRE_ESM]: Must use import to load ES Module:');\n  });\n\n  test('defers to fallback loaders when URL should not be handled by ts-node', async () => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} index.mjs`, {\n      cwd: join(TEST_DIR, './esm-import-http-url'),\n    });\n    expect(r.err).not.toBe(null);\n    // expect error from node's default resolver\n    expect(r.stderr).toMatch(\n      /Error \\[ERR_UNSUPPORTED_ESM_URL_SCHEME\\]:.*(?:\\n.*){0,2}\\n *at (defaultResolve|defaultLoad)/\n    );\n  });\n\n  test('should bypass import cache when changing search params', async () => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`, {\n      cwd: join(TEST_DIR, './esm-import-cache'),\n    });\n    expect(r.err).toBe(null);\n    expect(r.stdout).toBe('log1\\nlog2\\nlog2\\n');\n  });\n\n  test('should support transpile only mode via dedicated loader entrypoint', async () => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT}/transpile-only index.ts`, {\n      cwd: join(TEST_DIR, './esm-transpile-only'),\n    });\n    expect(r.err).toBe(null);\n    expect(r.stdout).toBe('');\n  });\n  test('should throw type errors without transpile-only enabled', async () => {\n    const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} index.ts`, {\n      cwd: join(TEST_DIR, './esm-transpile-only'),\n    });\n    if (r.err === null) {\n      throw new Error('Command was expected to fail, but it succeeded.');\n    }\n\n    expect(r.err.message).toMatch('Unable to compile TypeScript');\n    expect(r.err.message).toMatch(\n      new RegExp(\"TS2345: Argument of type '(?:number|1101)' is not assignable to parameter of type 'string'\\\\.\")\n    );\n    expect(r.err.message).toMatch(\n      new RegExp(\"TS2322: Type '(?:\\\"hello world\\\"|string)' is not assignable to type 'number'\\\\.\")\n    );\n    expect(r.stdout).toBe('');\n  });\n\n  test.suite('moduleTypes', (test) => {\n    suite('with vanilla ts transpilation', 'tsconfig.json');\n    suite('with third-party-transpiler', 'tsconfig-swc.json');\n    function suite(name: string, tsconfig: string) {\n      test.suite(name, (test) => {\n        test('supports CJS webpack.config.ts in an otherwise ESM project', async (t) => {\n          // A notable case where you can use ts-node's CommonJS loader, not the ESM loader, in an ESM project:\n          // when loading a webpack.config.ts or similar config\n          const r = await exec(\n            `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project ./module-types/override-to-cjs/${tsconfig} ./module-types/override-to-cjs/test-webpack-config.cjs`\n          );\n          expect(r.err).toBe(null);\n          expect(r.stdout).toBe(``);\n        });\n        test('should allow importing CJS in an otherwise ESM project', async (t) => {\n          await run('override-to-cjs', tsconfig, 'cjs');\n          if (semver.gte(process.version, '14.13.1')) await run('override-to-cjs', tsconfig, 'mjs');\n        });\n        test('should allow importing ESM in an otherwise CJS project', async (t) => {\n          await run('override-to-esm', tsconfig, 'cjs');\n          // Node 14.13.0 has a bug(?) where it checks for ESM-only syntax *before* we transform the code.\n          if (semver.gte(process.version, '14.13.1')) await run('override-to-esm', tsconfig, 'mjs');\n        });\n      });\n    }\n    async function run(project: string, config: string, ext: string) {\n      const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} ./module-types/${project}/test.${ext}`, {\n        env: {\n          ...process.env,\n          TS_NODE_PROJECT: `./module-types/${project}/${config}`,\n        },\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout).toBe(`Failures: 0\\n`);\n    }\n  });\n\n  test.suite('createEsmHooks()', (test) => {\n    test('should create proper hooks with provided instance', async () => {\n      const r = await exec(`node --loader ./loader.mjs index.ts`, {\n        cwd: join(TEST_DIR, './esm-custom-loader'),\n      });\n\n      if (r.err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(r.err.message).toMatch(/TS6133:\\s+'unusedVar'/);\n    });\n  });\n\n  test.suite('unit test hooks', ({ contextEach }) => {\n    const test = contextEach(async (t) => {\n      const service = t.context.tsNodeUnderTest.create({\n        cwd: TEST_DIR,\n      });\n      t.teardown(() => {\n        resetNodeEnvironment();\n      });\n      return {\n        service,\n        hooks: t.context.tsNodeUnderTest.createEsmHooks(service),\n      };\n    });\n\n    test.suite('data URIs', (test) => {\n      test.if(nodeUsesNewHooksApi);\n\n      test('Correctly determines format of data URIs', async (t) => {\n        const { hooks } = t.context;\n        const url = 'data:text/javascript,console.log(\"hello world\");';\n        const result = await (hooks as NodeLoaderHooksAPI2).load(\n          url,\n          { format: undefined },\n          async (url, context, _ignored) => {\n            return { format: context.format!, source: '' };\n          }\n        );\n        expect(result.format).toBe('module');\n      });\n    });\n  });\n\n  test.suite('supports import assertions', (test) => {\n    test.if(nodeSupportsImportAssertions && tsSupportsImportAssertions);\n\n    const macro = test.macro((flags: string) => async (t) => {\n      const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} ${flags} ./importJson.ts`, {\n        cwd: resolve(TEST_DIR, 'esm-import-assertions'),\n      });\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('A fuchsia car has 2 seats and the doors are open.\\nDone!');\n    });\n\n    test.suite('when node does not require --experimental-json-modules', (test) => {\n      test.if(nodeSupportsUnflaggedJsonImports);\n      test('Can import JSON modules with appropriate assertion', macro, '');\n    });\n    test.suite('when node requires --experimental-json-modules', (test) => {\n      test.if(!nodeSupportsUnflaggedJsonImports);\n      test('Can import JSON using the appropriate flag and assertion', macro, '--experimental-json-modules');\n    });\n  });\n\n  test.suite('Entrypoint resolution falls back to CommonJS resolver and format', (test) => {\n    test('extensionless entrypoint', async (t) => {\n      const r = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./esm-loader-entrypoint-cjs-fallback/extensionless-entrypoint`\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('Hello world!');\n    });\n    test('relies upon CommonJS resolution', async (t) => {\n      const r = await exec(\n        `${CMD_ESM_LOADER_WITHOUT_PROJECT} ./esm-loader-entrypoint-cjs-fallback/relies-upon-cjs-resolution`\n      );\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('Hello world!');\n    });\n    test('fails as expected when entrypoint does not exist at all', async (t) => {\n      const r = await exec(`${CMD_ESM_LOADER_WITHOUT_PROJECT} ./esm-loader-entrypoint-cjs-fallback/does-not-exist`);\n      expect(r.err).toBeDefined();\n      expect(r.stderr).toContain(`Cannot find module `);\n    });\n  });\n\n  test.suite('spawns child process', async (test) => {\n    basic('ts-node-esm executable', () => exec(`${BIN_ESM_PATH} ./esm-child-process/via-flag/index.ts foo bar`));\n    basic('ts-node --esm flag', () => exec(`${BIN_PATH} --esm ./esm-child-process/via-flag/index.ts foo bar`));\n    basic('ts-node w/tsconfig esm:true', () =>\n      exec(`${BIN_PATH} --esm ./esm-child-process/via-tsconfig/index.ts foo bar`)\n    );\n\n    function basic(title: string, cb: () => ExecReturn) {\n      test(title, async (t) => {\n        const r = await cb();\n        expect(r.err).toBe(null);\n        expect(r.stdout.trim()).toBe('CLI args: foo bar');\n        expect(r.stderr).toBe('');\n      });\n    }\n\n    test('extensionless entrypoint, regression test for #1943', async (t) => {\n      const r = await exec(`${BIN_ESM_PATH} ./esm-loader-entrypoint-cjs-fallback/extensionless-entrypoint`);\n      expect(r.err).toBe(null);\n      expect(r.stdout.trim()).toBe('Hello world!');\n    });\n\n    test.suite('parent passes signals to child', (test) => {\n      signalTest('SIGINT');\n      signalTest('SIGTERM');\n\n      function signalTest(signal: string) {\n        test(signal, async (t) => {\n          const childP = spawn([\n            // exec lets us run the shims on windows; spawn does not\n            process.execPath,\n            BIN_PATH_JS,\n            `./esm-child-process/via-tsconfig/sleep.ts`,\n          ]);\n          try {\n            await childP.stdout.wait('child registered signal handlers');\n            process.kill(childP.child.pid, signal);\n            await childP;\n            const stdout = await childP.stdout;\n            const stderr = await childP.stderr;\n            if (process.platform === 'win32') {\n              // Windows doesn't have signals, and node attempts an imperfect facsimile.\n              // In Windows, SIGINT and SIGTERM kill the process immediately with exit\n              // code 1, and the process can't catch or prevent this.\n              expect(childP.code).toBe(1);\n              expect(stdout.trim()).toBe(`child registered signal handlers`);\n            } else {\n              expect(childP.code).toBe(123);\n              expect(stdout.trim()).toBe(\n                `child registered signal handlers\\nchild received signal: ${signal}\\nchild exiting`\n              );\n            }\n            expect(stderr).toBe('');\n          } finally {\n            t.log({\n              stdout: await childP.stdout,\n              stderr: await childP.stderr,\n              code: childP.code,\n            });\n          }\n        });\n      }\n    });\n\n    test.suite('esm child process working directory', (test) => {\n      test('should have the correct working directory in the user entry-point', async () => {\n        const r = await exec(`${BIN_PATH} --esm --cwd ./esm/ index.ts`, {\n          cwd: resolve(TEST_DIR, 'working-dir'),\n        });\n\n        expect(r.err).toBe(null);\n        expect(r.stdout.trim()).toBe('Passing');\n        expect(r.stderr).toBe('');\n      });\n    });\n\n    test.suite('esm child process and forking', (test) => {\n      const macro = test.macro((command: string) => async (t) => {\n        const r = await exec(command);\n\n        expect(r.err).toBe(null);\n        expect(r.stdout.trim()).toBe('Passing: from main');\n        expect(r.stderr).toBe('');\n      });\n\n      test(\n        'should be able to fork vanilla NodeJS script',\n        macro,\n        `${BIN_PATH} --esm --cwd ./esm-child-process/ ./process-forking-js/index.ts`\n      );\n      test(\n        'should be able to fork TypeScript script',\n        macro,\n        `${BIN_PATH} --esm --cwd ./esm-child-process/ ./process-forking-ts/index.ts`\n      );\n      test(\n        'should be able to fork TypeScript script by absolute path',\n        macro,\n        `${BIN_PATH} --esm --cwd ./esm-child-process/ ./process-forking-ts-abs/index.ts`\n      );\n    });\n  });\n\n  test('throws ERR_REQUIRE_ESM when attempting to require() an ESM script when ESM loader is *not* enabled', async () => {\n    // Node versions >= 12 support package.json \"type\" field and so will throw an error when attempting to load ESM as CJS\n    const r = await exec(`${BIN_PATH} ./index.js`, {\n      cwd: join(TEST_DIR, './esm-err-require-esm'),\n    });\n    expect(r.err).not.toBe(null);\n    expect(r.stderr).toMatch('Error [ERR_REQUIRE_ESM]: Must use import to load ES Module:');\n  });\n});\n\ntest.suite(\"Catch unexpected changes to node's loader context\", (test) => {\n  // loader context includes import assertions, therefore this test requires support for import assertions\n  test.if(nodeSupportsImportAssertions);\n\n  /*\n   * This does not test ts-node.\n   * Rather, it is meant to alert us to potentially breaking changes in node's\n   * loader API.  If node starts returning more or less properties on `context`\n   * objects, we want to know, because it may indicate that our loader code\n   * should be updated to accomodate the new properties, either by proxying them,\n   * modifying them, or suppressing them.\n   */\n  test('Ensure context passed to loader by node has only expected properties', async (t) => {\n    const r = await exec(\n      `node --loader ./esm-loader-context/loader.mjs --experimental-json-modules ./esm-loader-context/index.mjs`\n    );\n    const rows = r.stdout.split('\\n').filter((v) => v[0] === '{');\n    expect(rows.length).toBe(14);\n    rows.forEach((row) => {\n      const json = JSON.parse(row) as {\n        resolveContextKeys?: string[];\n        loadContextKeys?: string[];\n      };\n      if (json.resolveContextKeys) {\n        expect(json.resolveContextKeys).toEqual(['conditions', 'importAssertions', 'parentURL']);\n      } else if (json.loadContextKeys) {\n        expect(json.loadContextKeys).toEqual(['format', 'importAssertions']);\n      } else {\n        throw new Error('Unexpected stdout in test.');\n      }\n    });\n  });\n});\n"]}