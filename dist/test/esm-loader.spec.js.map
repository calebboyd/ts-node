{"version":3,"file":"esm-loader.spec.js","sourceRoot":"","sources":["../../src/test/esm-loader.spec.ts"],"names":[],"mappings":";AAAA,wBAAwB;AACxB,gGAAgG;AAChG,gCAAgC;;;;;;;;;;;AAEhC,uCAAoC;AACpC,iCAAkC;AAClC,uCAKmB;AACnB,iDAA4C;AAC5C,+BAA4B;AAC5B,iCAAiC;AAGjC,MAAM,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAEnE,MAAM,IAAI,GAAG,IAAA,iBAAO,EAAC,gCAAsB,CAAC,CAAC;AAE7C,MAAM,IAAI,GAAG,IAAA,yBAAU,EAAC;IACtB,GAAG,EAAE,kBAAQ;CACd,CAAC,CAAC;AAEH,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,EAAE;IACpC,IAAI,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE;QAC1C,IAAI,CAAC,mDAAmD,EAAE,GAAS,EAAE;YACnE,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,CACxB,QAAQ,mCAAyB,iCAAiC,EAClE;gBACE,GAAG,EAAE,IAAA,WAAI,EAAC,kBAAQ,EAAE,qBAAqB,CAAC;aAC3C,CACF,CAAC;YAEF,IAAI,GAAG,KAAK,IAAI,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;aACpE;YAED,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QACvD,CAAC,CAAA,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;IAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAO,CAAC,EAAE,EAAE;QACrC,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC;YAC/C,GAAG,EAAE,kBAAQ;SACd,CAAC,CAAC;QACH,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE;YACd,IAAA,8BAAoB,GAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,OAAO;YACL,OAAO;YACP,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC;SACzD,CAAC;IACJ,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,mBAAmB,EAAE;QACvB,IAAI,CAAC,0CAA0C,EAAE,CAAO,CAAC,EAAE,EAAE;YAC3D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC;YAC5B,MAAM,GAAG,GAAG,kDAAkD,CAAC;YAC/D,MAAM,MAAM,GAAG,MAAO,KAA6B,CAAC,IAAI,CACtD,GAAG,EACH,EAAE,MAAM,EAAE,SAAS,EAAE,EACrB,CAAO,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;gBAC/B,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,MAAO,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;YACjD,CAAC,CAAA,CACF,CAAC;YACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC,CAAA,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["// ESM loader hook tests\n// TODO: at the time of writing, other ESM loader hook tests have not been moved into this file.\n// Should consolidate them here.\n\nimport { context } from './testlib';\nimport semver = require('semver');\nimport {\n  contextTsNodeUnderTest,\n  EXPERIMENTAL_MODULES_FLAG,\n  resetNodeEnvironment,\n  TEST_DIR,\n} from './helpers';\nimport { createExec } from './exec-helpers';\nimport { join } from 'path';\nimport * as expect from 'expect';\nimport type { NodeLoaderHooksAPI2 } from '../';\n\nconst nodeUsesNewHooksApi = semver.gte(process.version, '16.12.0');\n\nconst test = context(contextTsNodeUnderTest);\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\ntest.suite('createEsmHooks', (test) => {\n  if (semver.gte(process.version, '12.16.0')) {\n    test('should create proper hooks with provided instance', async () => {\n      const { err } = await exec(\n        `node ${EXPERIMENTAL_MODULES_FLAG} --loader ./loader.mjs index.ts`,\n        {\n          cwd: join(TEST_DIR, './esm-custom-loader'),\n        }\n      );\n\n      if (err === null) {\n        throw new Error('Command was expected to fail, but it succeeded.');\n      }\n\n      expect(err.message).toMatch(/TS6133:\\s+'unusedVar'/);\n    });\n  }\n});\n\ntest.suite('hooks', (_test) => {\n  const test = _test.context(async (t) => {\n    const service = t.context.tsNodeUnderTest.create({\n      cwd: TEST_DIR,\n    });\n    t.teardown(() => {\n      resetNodeEnvironment();\n    });\n    return {\n      service,\n      hooks: t.context.tsNodeUnderTest.createEsmHooks(service),\n    };\n  });\n\n  if (nodeUsesNewHooksApi) {\n    test('Correctly determines format of data URIs', async (t) => {\n      const { hooks } = t.context;\n      const url = 'data:text/javascript,console.log(\"hello world\");';\n      const result = await (hooks as NodeLoaderHooksAPI2).load(\n        url,\n        { format: undefined },\n        async (url, context, _ignored) => {\n          return { format: context.format!, source: '' };\n        }\n      );\n      expect(result.format).toBe('module');\n    });\n  }\n});\n"]}