{"version":3,"file":"pluggable-dep-resolution.spec.js","sourceRoot":"","sources":["../../src/test/pluggable-dep-resolution.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { context } from './testlib';\nimport { ctxTsNode, resetNodeEnvironment, TEST_DIR } from './helpers';\nimport * as expect from 'expect';\nimport { resolve } from 'path';\n\nconst test = context(ctxTsNode);\n\ntest.suite(\n  'Pluggable dependency (compiler, transpiler, swc backend) is require()d relative to the tsconfig file that declares it',\n  (test) => {\n    test.serial();\n\n    // The use-case we want to support:\n    //\n    // User shares their tsconfig across multiple projects as an npm module named \"shared-config\", similar to @tsconfig/bases\n    // In their npm module\n    //     They have tsconfig.json with `swc: true` or `compiler: \"ts-patch\"` or something like that\n    //     The module declares a dependency on a known working version of @swc/core, or ts-patch, or something like that.\n    // They use this reusable config via `npm install shared-config` and `\"extends\": \"shared-config/tsconfig.json\"`\n    //\n    // ts-node should resolve ts-patch or @swc/core relative to the extended tsconfig\n    // to ensure we use the known working versions.\n\n    const macro = test.macro((config: string, expected: string) => [\n      `${config} uses ${expected}`,\n      async (t) => {\n        t.teardown(resetNodeEnvironment);\n\n        // A bit hacky: we've monkey-patched the various dependencies to either:\n        // a) return transpiled output we expect\n        // b) throw an error that we expect\n        // Either way, we've proven that the correct dependency is used, which\n        // is our goal.\n        let output: string;\n        try {\n          output = t.context.tsNodeUnderTest\n            .create({\n              project: resolve(TEST_DIR, 'pluggable-dep-resolution', config),\n            })\n            .compile('', 'index.ts');\n        } catch (e) {\n          expect(e).toBe(`emit from ${expected}`);\n          return;\n        }\n\n        expect(output).toContain(`emit from ${expected}\\n`);\n      },\n    ]);\n\n    test(macro, 'tsconfig-custom-compiler.json', 'root custom compiler');\n    test(macro, 'tsconfig-custom-transpiler.json', 'root custom transpiler');\n    test(macro, 'tsconfig-swc-custom-backend.json', 'root custom swc backend');\n    test(macro, 'tsconfig-swc-core.json', 'root @swc/core');\n    test(macro, 'tsconfig-swc-wasm.json', 'root @swc/wasm');\n    test(macro, 'tsconfig-swc.json', 'root @swc/core');\n\n    test(macro, 'node_modules/shared-config/tsconfig-custom-compiler.json', 'shared-config custom compiler');\n    test(macro, 'node_modules/shared-config/tsconfig-custom-transpiler.json', 'shared-config custom transpiler');\n    test(macro, 'node_modules/shared-config/tsconfig-swc-custom-backend.json', 'shared-config custom swc backend');\n    test(macro, 'node_modules/shared-config/tsconfig-swc-core.json', 'shared-config @swc/core');\n    test(macro, 'node_modules/shared-config/tsconfig-swc-wasm.json', 'shared-config @swc/wasm');\n    test(macro, 'node_modules/shared-config/tsconfig-swc.json', 'shared-config @swc/core');\n\n    test.suite('\"extends\"', (test) => {\n      test(macro, 'tsconfig-extend-custom-compiler.json', 'shared-config custom compiler');\n      test(macro, 'tsconfig-extend-custom-transpiler.json', 'shared-config custom transpiler');\n      test(macro, 'tsconfig-extend-swc-custom-backend.json', 'shared-config custom swc backend');\n      test(macro, 'tsconfig-extend-swc-core.json', 'shared-config @swc/core');\n      test(macro, 'tsconfig-extend-swc-wasm.json', 'shared-config @swc/wasm');\n      test(macro, 'tsconfig-extend-swc.json', 'shared-config @swc/core');\n    });\n  }\n);\n"]}