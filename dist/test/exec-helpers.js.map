{"version":3,"file":"exec-helpers.js","sourceRoot":"","sources":["../../src/test/exec-helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,iDAAyD;AACzD,iCAAiC;AAUjC,SAAgB,UAAU,CACxB,eAAmB;IAEnB;;;;OAIG;IACH,OAAO,SAAS,IAAI,CAClB,GAAW,EACX,IACyD;QAEzD,IAAI,KAAoB,CAAC;QACzB,OAAO,MAAM,CAAC,MAAM,CAClB,IAAI,OAAO,CAAa,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,KAAK,GAAG,IAAA,oBAAgB,EACtB,GAAG,kCAEE,eAAe,GACf,IAAI,GAET,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;gBACtB,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1C,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,EACF;YACE,KAAK;SACN,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAhCD,gCAgCC;AAED,MAAM,WAAW,GAAG,UAAU,EAAE,CAAC;AAWjC;;;GAGG;AACH,SAAgB,gBAAgB,CAC9B,eAAkB;IAElB,OAAO,UACL,OAIqE;;YAErE,MAAM,EACJ,GAAG,EACH,KAAK,GAAG,EAAE,EACV,KAAK,EACL,WAAW,GAAG,KAAK,EACnB,GAAG,EACH,IAAI,GAAG,WAAW,GACnB,mCACI,eAAe,GACf,OAAO,CACX,CAAC;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE,EAAE;gBAC1C,GAAG,kCAAO,OAAO,CAAC,GAAG,GAAK,GAAG,CAAE;aAChC,CAAC,CAAC;YACH,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,WAAW,CAAC,KAAK,CAAC,KAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACrC;YACD,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,WAAW,CAAC;YAClD,IAAI,WAAW,EAAE;gBACf,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;aAC3B;iBAAM;gBACL,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;aACxB;YACD,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;QACjC,CAAC;KAAA,CAAC;AACJ,CAAC;AAnCD,4CAmCC","sourcesContent":["import type { ChildProcess, ExecException, ExecOptions } from 'child_process';\nimport { exec as childProcessExec } from 'child_process';\nimport * as expect from 'expect';\n\nexport type ExecReturn = Promise<ExecResult> & { child: ChildProcess };\nexport interface ExecResult {\n  stdout: string;\n  stderr: string;\n  err: null | ExecException;\n  child: ChildProcess;\n}\n\nexport function createExec<T extends Partial<ExecOptions>>(\n  preBoundOptions?: T\n) {\n  /**\n   * Helper to exec a child process.\n   * Returns a Promise and a reference to the child process to suite multiple situations.\n   * Promise resolves with the process's stdout, stderr, and error.\n   */\n  return function exec(\n    cmd: string,\n    opts?: Pick<ExecOptions, Exclude<keyof ExecOptions, keyof T>> &\n      Partial<Pick<ExecOptions, keyof T & keyof ExecOptions>>\n  ): ExecReturn {\n    let child!: ChildProcess;\n    return Object.assign(\n      new Promise<ExecResult>((resolve, reject) => {\n        child = childProcessExec(\n          cmd,\n          {\n            ...preBoundOptions,\n            ...opts,\n          },\n          (err, stdout, stderr) => {\n            resolve({ err, stdout, stderr, child });\n          }\n        );\n      }),\n      {\n        child,\n      }\n    );\n  };\n}\n\nconst defaultExec = createExec();\n\nexport interface ExecTesterOptions {\n  cmd: string;\n  flags?: string;\n  env?: Record<string, string>;\n  stdin?: string;\n  expectError?: boolean;\n  exec?: typeof defaultExec;\n}\n\n/**\n * Create a function that launches a CLI command, optionally pipes stdin, optionally sets env vars,\n * optionally runs a couple baked-in assertions, and returns the results for additional assertions.\n */\nexport function createExecTester<T extends Partial<ExecTesterOptions>>(\n  preBoundOptions: T\n) {\n  return async function (\n    options: Pick<\n      ExecTesterOptions,\n      Exclude<keyof ExecTesterOptions, keyof T>\n    > &\n      Partial<Pick<ExecTesterOptions, keyof T & keyof ExecTesterOptions>>\n  ) {\n    const {\n      cmd,\n      flags = '',\n      stdin,\n      expectError = false,\n      env,\n      exec = defaultExec,\n    } = {\n      ...preBoundOptions,\n      ...options,\n    };\n    const execPromise = exec(`${cmd} ${flags}`, {\n      env: { ...process.env, ...env },\n    });\n    if (stdin !== undefined) {\n      execPromise.child.stdin!.end(stdin);\n    }\n    const { err, stdout, stderr } = await execPromise;\n    if (expectError) {\n      expect(err).toBeDefined();\n    } else {\n      expect(err).toBeNull();\n    }\n    return { stdout, stderr, err };\n  };\n}\n"]}