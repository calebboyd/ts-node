{"version":3,"file":"reset-node-environment.js","sourceRoot":"","sources":["../../../src/test/helpers/reset-node-environment.ts"],"names":[],"mappings":"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","sourcesContent":["import { has, mapValues, sortBy } from 'lodash';\n\n// Reset node environment\n// Useful because ts-node installation necessarily must mutate the node environment.\n// Yet we want to run tests in-process for speed.\n// So we need to reliably reset everything changed by ts-node installation.\n\nconst defaultRequireExtensions = captureObjectState(require.extensions);\n// Avoid node deprecation warning for accessing _channel\nconst defaultProcess = captureObjectState(process, ['_channel']);\nconst defaultModule = captureObjectState(require('module'));\nconst defaultError = captureObjectState(Error);\nconst defaultGlobal = captureObjectState(global);\n\n/**\n * Undo all of ts-node & co's installed hooks, resetting the node environment to default\n * so we can run multiple test cases which `.register()` ts-node.\n *\n * Must also play nice with `nyc`'s environmental mutations.\n */\nexport function resetNodeEnvironment() {\n  const sms = require('@cspotcode/source-map-support') as typeof import('@cspotcode/source-map-support');\n  // We must uninstall so that it resets its internal state; otherwise it won't know it needs to reinstall in the next test.\n  sms.uninstall();\n  // Must remove handlers to avoid a memory leak\n  sms.resetRetrieveHandlers();\n\n  // Modified by ts-node hooks\n  resetObject(require.extensions, defaultRequireExtensions, undefined, undefined, undefined, true);\n\n  // ts-node attaches a property when it registers an instance\n  // source-map-support monkey-patches the emit function\n  // Avoid node deprecation warnings for setting process.config or accessing _channel\n  resetObject(process, defaultProcess, undefined, ['_channel'], ['config']);\n\n  // source-map-support swaps out the prepareStackTrace function\n  resetObject(Error, defaultError);\n\n  // _resolveFilename et.al. are modified by ts-node, tsconfig-paths, source-map-support, yarn, maybe other things?\n  resetObject(require('module'), defaultModule, undefined, ['wrap', 'wrapper']);\n\n  // May be modified by REPL tests, since the REPL sets globals.\n  // Avoid deleting nyc's coverage data.\n  resetObject(global, defaultGlobal, ['__coverage__']);\n\n  // Reset our ESM hooks\n  process.__test_setloader__?.(undefined);\n}\n\nfunction captureObjectState(object: any, avoidGetters: string[] = []) {\n  const descriptors = Object.getOwnPropertyDescriptors(object);\n  const values = mapValues(descriptors, (_d, key) => {\n    if (avoidGetters.includes(key)) return descriptors[key].value;\n    return object[key];\n  });\n  return {\n    descriptors,\n    values,\n  };\n}\n// Redefine all property descriptors and delete any new properties\nfunction resetObject(\n  object: any,\n  state: ReturnType<typeof captureObjectState>,\n  doNotDeleteTheseKeys: string[] = [],\n  doNotSetTheseKeys: true | string[] = [],\n  avoidSetterIfUnchanged: string[] = [],\n  reorderProperties = false\n) {\n  const currentDescriptors = Object.getOwnPropertyDescriptors(object);\n  for (const key of Object.keys(currentDescriptors)) {\n    if (doNotDeleteTheseKeys.includes(key)) continue;\n    if (has(state.descriptors, key)) continue;\n    delete object[key];\n  }\n  // Trigger nyc's setter functions\n  for (const [key, value] of Object.entries(state.values)) {\n    try {\n      if (doNotSetTheseKeys === true || doNotSetTheseKeys.includes(key)) continue;\n      if (avoidSetterIfUnchanged.includes(key) && object[key] === value) continue;\n      state.descriptors[key].set?.call(object, value);\n    } catch {}\n  }\n  // Reset descriptors\n  Object.defineProperties(object, state.descriptors);\n\n  if (reorderProperties) {\n    // Delete and re-define each property so that they are in original order\n    const originalOrder = Object.keys(state.descriptors);\n    const properties = Object.getOwnPropertyDescriptors(object);\n    const sortedKeys = sortBy(Object.keys(properties), (name) =>\n      originalOrder.includes(name) ? originalOrder.indexOf(name) : 999\n    );\n    for (const key of sortedKeys) {\n      delete object[key];\n      Object.defineProperty(object, key, properties[key]);\n    }\n  }\n}\n"]}