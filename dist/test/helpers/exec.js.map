{"version":3,"file":"exec.js","sourceRoot":"","sources":["../../../src/test/helpers/exec.ts"],"names":[],"mappings":";;;AACA,iDAAqF;AACrF,4DAAsE;AACtE,wCAAoC;AAUpC,SAAgB,UAAU,CAAiC,eAAmB;IAC5E;;;;OAIG;IACH,OAAO,SAAS,IAAI,CAClB,GAAW,EACX,IACyD;QAEzD,IAAI,KAAoB,CAAC;QACzB,OAAO,MAAM,CAAC,MAAM,CAClB,IAAI,OAAO,CAAa,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1C,KAAK,GAAG,IAAA,oBAAgB,EACtB,GAAG,EACH;gBACE,GAAG,eAAe;gBAClB,GAAG,IAAI;aACR,EACD,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;gBACtB,OAAO,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1C,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,EACF;YACE,KAAK;SACN,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AA9BD,gCA8BC;AAUD,SAAgB,WAAW,CAAkC,eAAmB;IAC9E;;;;;;OAMG;IACH,OAAO,SAAS,KAAK,CACnB,GAAa,EACb,IAC2D;QAE3D,IAAI,KAAoB,CAAC;QACzB,IAAI,MAAqB,CAAC;QAC1B,IAAI,MAAqB,CAAC;QAC1B,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAC3B,IAAI,OAAO,CAAc,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,KAAK,GAAG,IAAA,qBAAiB,EAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBAC9C,GAAG,eAAe;gBAClB,GAAG,IAAI;aACR,CAAC,CAAC;YACH,MAAM,GAAG,IAAA,4BAAY,EAAC,KAAK,CAAC,MAAO,CAAC,CAAC;YACrC,MAAM,GAAG,IAAA,4BAAY,EAAC,KAAK,CAAC,MAAO,CAAC,CAAC;YACrC,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBACxB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBACpB,OAAO,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC1B,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,EACF;YACE,KAAK;YACL,MAAM;YACN,MAAM;YACN,IAAI,EAAE,IAAqB;SAC5B,CACF,CAAC;QACF,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;AACJ,CAAC;AAzCD,kCAyCC;AAED,MAAM,WAAW,GAAG,UAAU,EAAE,CAAC;AACT,2BAAI;AAW5B;;;GAGG;AACH,SAAgB,gBAAgB,CAAuC,eAAkB;IACvF,OAAO,KAAK,WACV,OACqE;QAErE,MAAM,EACJ,GAAG,EACH,KAAK,GAAG,EAAE,EACV,KAAK,EACL,WAAW,GAAG,KAAK,EACnB,GAAG,EACH,IAAI,GAAG,WAAW,GACnB,GAAG;YACF,GAAG,eAAe;YAClB,GAAG,OAAO;SACX,CAAC;QACF,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE,EAAE;YAChC,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE;SAChC,CAAC,CAAC;QACH,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,CAAC,CAAC,KAAK,CAAC,KAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC3B;QACD,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;QAClB,IAAI,WAAW,EAAE;YACf,IAAA,gBAAM,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;SAC7B;aAAM;YACL,IAAA,gBAAM,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;SAC1B;QACD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;AACJ,CAAC;AA9BD,4CA8BC","sourcesContent":["import type { ChildProcess, ExecException, ExecOptions, SpawnOptions } from 'child_process';\nimport { exec as childProcessExec, spawn as childProcessSpawn } from 'child_process';\nimport { ExpectStream, expectStream } from '@cspotcode/expect-stream';\nimport { expect } from '../testlib';\n\nexport type ExecReturn = Promise<ExecResult> & { child: ChildProcess };\nexport interface ExecResult {\n  stdout: string;\n  stderr: string;\n  err: null | ExecException;\n  child: ChildProcess;\n}\n\nexport function createExec<T extends Partial<ExecOptions>>(preBoundOptions?: T) {\n  /**\n   * Helper to exec a child process.\n   * Returns a Promise and a reference to the child process to suite multiple situations.\n   * Promise resolves with the process's stdout, stderr, and error.\n   */\n  return function exec(\n    cmd: string,\n    opts?: Pick<ExecOptions, Exclude<keyof ExecOptions, keyof T>> &\n      Partial<Pick<ExecOptions, keyof T & keyof ExecOptions>>\n  ): ExecReturn {\n    let child!: ChildProcess;\n    return Object.assign(\n      new Promise<ExecResult>((resolve, reject) => {\n        child = childProcessExec(\n          cmd,\n          {\n            ...preBoundOptions,\n            ...opts,\n          },\n          (err, stdout, stderr) => {\n            resolve({ err, stdout, stderr, child });\n          }\n        );\n      }),\n      {\n        child,\n      }\n    );\n  };\n}\n\nexport type SpawnReturn = Promise<SpawnResult> & SpawnResult;\nexport interface SpawnResult {\n  stdout: ExpectStream;\n  stderr: ExpectStream;\n  code: number | null;\n  child: ChildProcess;\n}\n\nexport function createSpawn<T extends Partial<SpawnOptions>>(preBoundOptions?: T) {\n  /**\n   * Helper to spawn a child process.\n   * Returns a Promise and a reference to the child process to suite multiple situations.\n   *\n   * Should almost always avoid this helper, and instead use `createExec` / `exec`.  `spawn`\n   * may be necessary if you need to avoid `exec`'s intermediate shell.\n   */\n  return function spawn(\n    cmd: string[],\n    opts?: Pick<SpawnOptions, Exclude<keyof SpawnOptions, keyof T>> &\n      Partial<Pick<SpawnOptions, keyof T & keyof SpawnOptions>>\n  ): SpawnReturn {\n    let child!: ChildProcess;\n    let stdout!: ExpectStream;\n    let stderr!: ExpectStream;\n    const promise = Object.assign(\n      new Promise<SpawnResult>((resolve, reject) => {\n        child = childProcessSpawn(cmd[0], cmd.slice(1), {\n          ...preBoundOptions,\n          ...opts,\n        });\n        stdout = expectStream(child.stdout!);\n        stderr = expectStream(child.stderr!);\n        child.on('exit', (code) => {\n          promise.code = code;\n          resolve({ stdout, stderr, code, child });\n        });\n        child.on('error', (error) => {\n          reject(error);\n        });\n      }),\n      {\n        child,\n        stdout,\n        stderr,\n        code: null as number | null,\n      }\n    );\n    return promise;\n  };\n}\n\nconst defaultExec = createExec();\nexport { defaultExec as exec };\n\nexport interface ExecTesterOptions {\n  cmd: string;\n  flags?: string;\n  env?: Record<string, string>;\n  stdin?: string;\n  expectError?: boolean;\n  exec?: typeof defaultExec;\n}\n\n/**\n * Create a function that launches a CLI command, optionally pipes stdin, optionally sets env vars,\n * optionally runs a couple baked-in assertions, and returns the results for additional assertions.\n */\nexport function createExecTester<T extends Partial<ExecTesterOptions>>(preBoundOptions: T) {\n  return async function (\n    options: Pick<ExecTesterOptions, Exclude<keyof ExecTesterOptions, keyof T>> &\n      Partial<Pick<ExecTesterOptions, keyof T & keyof ExecTesterOptions>>\n  ) {\n    const {\n      cmd,\n      flags = '',\n      stdin,\n      expectError = false,\n      env,\n      exec = defaultExec,\n    } = {\n      ...preBoundOptions,\n      ...options,\n    };\n    const p = exec(`${cmd} ${flags}`, {\n      env: { ...process.env, ...env },\n    });\n    if (stdin !== undefined) {\n      p.child.stdin!.end(stdin);\n    }\n    const r = await p;\n    if (expectError) {\n      expect(r.err).toBeDefined();\n    } else {\n      expect(r.err).toBeNull();\n    }\n    return r;\n  };\n}\n"]}