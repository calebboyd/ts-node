{"version":3,"file":"ctx-ts-node.js","sourceRoot":"","sources":["../../../src/test/helpers/ctx-ts-node.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec as childProcessExec } from 'child_process';\nimport { lock } from 'proper-lockfile';\nimport { promisify } from 'util';\nimport { existsSync, readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\nimport type { ExecutionContext } from '../testlib';\nimport { sync as rimrafSync } from 'rimraf';\nimport { TEST_DIR } from './paths';\nimport { testsDirRequire, tsNodeTypes } from './misc';\n\n/** Pass to `test.context()` to get access to the ts-node API under test */\nexport async function ctxTsNode() {\n  await installTsNode();\n  const tsNodeUnderTest: typeof tsNodeTypes = testsDirRequire('ts-node');\n  return {\n    tsNodeUnderTest,\n  };\n}\nexport namespace ctxTsNode {\n  export type Ctx = Awaited<ReturnType<typeof ctxTsNode>>;\n  export type T = ExecutionContext<Ctx>;\n}\n\nconst ts_node_install_lock = process.env.ts_node_install_lock as string;\nconst lockPath = join(__dirname, ts_node_install_lock);\n\ninterface InstallationResult {\n  error: string | null;\n}\n\n/**\n * Pack and install ts-node locally, necessary to test package \"exports\"\n * FS locking b/c tests run in separate processes\n */\nexport async function installTsNode() {\n  await lockedMemoizedOperation(lockPath, async () => {\n    const totalTries = process.platform === 'win32' ? 5 : 1;\n    let tries = 0;\n    while (true) {\n      try {\n        rimrafSync(join(TEST_DIR, '.yarn/cache/ts-node-file-*'));\n        writeFileSync(join(TEST_DIR, 'yarn.lock'), '');\n        const result = await promisify(childProcessExec)(`yarn --no-immutable`, {\n          cwd: TEST_DIR,\n        });\n        // You can uncomment this to aid debugging\n        // console.log(result.stdout, result.stderr);\n        rimrafSync(join(TEST_DIR, '.yarn/cache/ts-node-file-*'));\n        writeFileSync(join(TEST_DIR, 'yarn.lock'), '');\n        break;\n      } catch (e) {\n        tries++;\n        if (tries >= totalTries) throw e;\n      }\n    }\n  });\n}\n\n/**\n * Attempt an operation once across multiple processes, using filesystem locking.\n * If it was executed already by another process, and it errored, throw the same error message.\n */\nasync function lockedMemoizedOperation(lockPath: string, operation: () => Promise<void>) {\n  const releaseLock = await lock(lockPath, {\n    realpath: false,\n    stale: 120e3,\n    retries: {\n      retries: 120,\n      maxTimeout: 1000,\n    },\n  });\n  try {\n    const operationHappened = existsSync(lockPath);\n    if (operationHappened) {\n      const result: InstallationResult = JSON.parse(readFileSync(lockPath, 'utf8'));\n      if (result.error) throw result.error;\n    } else {\n      const result: InstallationResult = { error: null };\n      try {\n        await operation();\n      } catch (e) {\n        result.error = `${e}`;\n        throw e;\n      } finally {\n        writeFileSync(lockPath, JSON.stringify(result));\n      }\n    }\n  } finally {\n    releaseLock();\n  }\n}\n"]}