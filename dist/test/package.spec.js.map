{"version":3,"file":"package.spec.js","sourceRoot":"","sources":["../../src/test/package.spec.ts"],"names":[],"mappings":";AAAA,6CAA6C;AAC7C,0BAA0B;AAC1B,uBAAuB;AACvB,gBAAgB;;AAEhB,uCAAuD;AACvD,uCAA4C;AAE5C,MAAM,IAAI,GAAG,IAAA,iBAAO,EAAC,mBAAS,CAAC,CAAC;AAEhC,IAAI,CAAC,mCAAmC,EAAE,CAAC,CAAC,EAAE,EAAE;IAC9C,IAAA,gBAAM,EAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,CAAC;AACxF,CAAC,CAAC,CAAC;AACH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC7C,0FAA0F;IAC1F,kDAAkD;IAElD,yBAAe,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAEnC,4HAA4H;IAC5H,yBAAe,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC3C,yBAAe,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAEhD,mHAAmH;IACnH,yBAAe,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAC5C,yBAAe,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC/C,yBAAe,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IACtD,yBAAe,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;IACzD,yBAAe,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IACnD,yBAAe,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IACtD,yBAAe,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAChD,yBAAe,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAEnD,oCAAoC;IACpC,yBAAe,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAC5C,yBAAe,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;IAClD,yBAAe,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IAC3D,yBAAe,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;IAEvD,8BAA8B;IAC9B,yBAAe,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvC,yBAAe,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC3C,yBAAe,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IACtD,yBAAe,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;IAE1D,yBAAe,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IACnD,yBAAe,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;IAEhE,yBAAe,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACxD,yBAAe,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACxD,yBAAe,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACxD,yBAAe,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC","sourcesContent":["// Verify the shape of the published tarball:\n// valid import specifiers\n// CLI commands on PATH\n// named exports\n\nimport { ctxTsNode, testsDirRequire } from './helpers';\nimport { context, expect } from './testlib';\n\nconst test = context(ctxTsNode);\n\ntest('should export the correct version', (t) => {\n  expect(t.context.tsNodeUnderTest.VERSION).toBe(require('../../package.json').version);\n});\ntest('should export all CJS entrypoints', () => {\n  // Ensure our package.json \"exports\" declaration allows `require()`ing all our entrypoints\n  // https://github.com/TypeStrong/ts-node/pull/1026\n\n  testsDirRequire.resolve('ts-node');\n\n  // only reliably way to ask node for the root path of a dependency is Path.resolve(require.resolve('ts-node/package'), '..')\n  testsDirRequire.resolve('ts-node/package');\n  testsDirRequire.resolve('ts-node/package.json');\n\n  // All bin entrypoints for people who need to augment our CLI: `node -r otherstuff ./node_modules/ts-node/dist/bin`\n  testsDirRequire.resolve('ts-node/dist/bin');\n  testsDirRequire.resolve('ts-node/dist/bin.js');\n  testsDirRequire.resolve('ts-node/dist/bin-transpile');\n  testsDirRequire.resolve('ts-node/dist/bin-transpile.js');\n  testsDirRequire.resolve('ts-node/dist/bin-script');\n  testsDirRequire.resolve('ts-node/dist/bin-script.js');\n  testsDirRequire.resolve('ts-node/dist/bin-cwd');\n  testsDirRequire.resolve('ts-node/dist/bin-cwd.js');\n\n  // Must be `require()`able obviously\n  testsDirRequire.resolve('ts-node/register');\n  testsDirRequire.resolve('ts-node/register/files');\n  testsDirRequire.resolve('ts-node/register/transpile-only');\n  testsDirRequire.resolve('ts-node/register/type-check');\n\n  // `node --loader ts-node/esm`\n  testsDirRequire.resolve('ts-node/esm');\n  testsDirRequire.resolve('ts-node/esm.mjs');\n  testsDirRequire.resolve('ts-node/esm/transpile-only');\n  testsDirRequire.resolve('ts-node/esm/transpile-only.mjs');\n\n  testsDirRequire.resolve('ts-node/transpilers/swc');\n  testsDirRequire.resolve('ts-node/transpilers/swc-experimental');\n\n  testsDirRequire.resolve('ts-node/node14/tsconfig.json');\n  testsDirRequire.resolve('ts-node/node16/tsconfig.json');\n  testsDirRequire.resolve('ts-node/node18/tsconfig.json');\n  testsDirRequire.resolve('ts-node/node20/tsconfig.json');\n});\n"]}