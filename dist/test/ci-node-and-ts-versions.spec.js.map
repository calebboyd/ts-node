{"version":3,"file":"ci-node-and-ts-versions.spec.js","sourceRoot":"","sources":["../../src/test/ci-node-and-ts-versions.spec.ts"],"names":[],"mappings":";AAAA,oFAAoF;AACpF,qCAAqC;;AAErC,iDAAyC;AACzC,iCAAkC;AAClC,uCAA0C;AAC1C,uCAA4C;AAE5C,MAAM,IAAI,GAAG,IAAA,iBAAO,EAAC,mBAAS,CAAC,CAAC;AAChC,IAAI,CAAC,KAAK,CAAC,4CAA4C,EAAE,CAAC,IAAI,EAAE,EAAE;IAChE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1B,IAAI,CAAC,yBAAyB,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAyB,CAAC;QAC9D,MAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC5C,CAAC,CAAC,GAAG,CAAC,EAAE,eAAe,EAAE,aAAa,EAAE,CAAC,CAAC;QAC1C,IAAA,gBAAM,EAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SAC3C;aAAM;YACL,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACrE;IACH,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,+BAA+B,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;QAChD,IAAI,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,8BAA+B,CAAC;QAClE,MAAM,aAAa,GAAG,YAAE,CAAC,OAAO,CAAC;QACjC,CAAC,CAAC,GAAG,CAAC,EAAE,eAAe,EAAE,aAAa,EAAE,CAAC,CAAC;QAC1C,IAAA,gBAAM,EAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,eAAe,KAAK,MAAM,IAAI,eAAe,KAAK,QAAQ,EAAE;YAC9D,MAAM,MAAM,GAAG,IAAA,wBAAQ,EAAC,uBAAuB,eAAe,iBAAiB,EAAE;gBAC/E,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;YACH,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAClB,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrC,IAAA,gBAAM,EAAC,YAAE,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC1C;aAAM;YACL,IAAA,gBAAM,EAAC,MAAM,CAAC,SAAS,CAAC,YAAE,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClE;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// When running on CI, double-check that we are testing against the versions of node\n// and typescript in the test matrix.\n\nimport { execSync } from 'child_process';\nimport semver = require('semver');\nimport { ctxTsNode, ts } from './helpers';\nimport { context, expect } from './testlib';\n\nconst test = context(ctxTsNode);\ntest.suite('Confirm node and typescript versions on CI', (test) => {\n  test.if(!!process.env.CI);\n  test('node version is correct', async (t) => {\n    const expectedVersion = process.env.TEST_MATRIX_NODE_VERSION!;\n    const actualVersion = process.versions.node;\n    t.log({ expectedVersion, actualVersion });\n    expect(expectedVersion).toBeDefined();\n    const major = expectedVersion.match(/^(\\d+)-nightly$/)?.[1];\n    if (major != null) {\n      expect(actualVersion).toMatch(new RegExp('^' + major));\n      expect(actualVersion).toMatch('-nightly');\n    } else {\n      expect(semver.satisfies(actualVersion, expectedVersion)).toBe(true);\n    }\n  });\n  test('typescript version is correct', async (t) => {\n    let expectedVersion = process.env.TEST_MATRIX_TYPESCRIPT_VERSION!;\n    const actualVersion = ts.version;\n    t.log({ expectedVersion, actualVersion });\n    expect(expectedVersion).toBeDefined();\n    if (expectedVersion === 'next' || expectedVersion === 'latest') {\n      const stdout = execSync(`npm view typescript@${expectedVersion} version --json`, {\n        encoding: 'utf8',\n      });\n      t.log({ stdout });\n      expectedVersion = JSON.parse(stdout);\n      expect(ts.version).toBe(expectedVersion);\n    } else {\n      expect(semver.satisfies(ts.version, expectedVersion)).toBe(true);\n    }\n  });\n});\n"]}