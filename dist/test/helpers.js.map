{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/test/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeFS } from '@yarnpkg/fslib';\nimport { exec as childProcessExec } from 'child_process';\nimport * as promisify from 'util.promisify';\nimport { sync as rimrafSync } from 'rimraf';\nimport { existsSync, readFileSync, unlinkSync, writeFileSync } from 'fs';\nimport { join, resolve } from 'path';\nimport * as fs from 'fs';\nimport { lock } from 'proper-lockfile';\nimport type { Readable } from 'stream';\n/**\n * types from ts-node under test\n */\nimport type * as tsNodeTypes from '../index';\nimport type _createRequire from 'create-require';\nimport { has, once } from 'lodash';\nimport semver = require('semver');\nimport * as expect from 'expect';\nconst createRequire: typeof _createRequire = require('create-require');\nexport { tsNodeTypes };\n\nexport const ROOT_DIR = resolve(__dirname, '../..');\nexport const DIST_DIR = resolve(__dirname, '..');\nexport const TEST_DIR = join(__dirname, '../../tests');\nexport const PROJECT = join(TEST_DIR, 'tsconfig.json');\nexport const BIN_PATH = join(TEST_DIR, 'node_modules/.bin/ts-node');\nexport const BIN_SCRIPT_PATH = join(\n  TEST_DIR,\n  'node_modules/.bin/ts-node-script'\n);\nexport const BIN_CWD_PATH = join(TEST_DIR, 'node_modules/.bin/ts-node-cwd');\n/** Default `ts-node --project` invocation */\nexport const CMD_TS_NODE_WITH_PROJECT_FLAG = `\"${BIN_PATH}\" --project \"${PROJECT}\"`;\n/** Default `ts-node` invocation without `--project` */\nexport const CMD_TS_NODE_WITHOUT_PROJECT_FLAG = `\"${BIN_PATH}\"`;\nexport const EXPERIMENTAL_MODULES_FLAG = semver.gte(process.version, '12.17.0')\n  ? ''\n  : '--experimental-modules';\nexport const CMD_ESM_LOADER_WITHOUT_PROJECT = `node ${EXPERIMENTAL_MODULES_FLAG} --loader ts-node/esm`;\n\n// `createRequire` does not exist on older node versions\nexport const testsDirRequire = createRequire(join(TEST_DIR, 'index.js'));\n\nexport const ts = testsDirRequire('typescript');\n\nexport const xfs = new NodeFS(fs);\n\n/** Pass to `test.context()` to get access to the ts-node API under test */\nexport const contextTsNodeUnderTest = once(async () => {\n  await installTsNode();\n  const tsNodeUnderTest: typeof tsNodeTypes = testsDirRequire('ts-node');\n  return {\n    tsNodeUnderTest,\n  };\n});\n\nconst ts_node_install_lock = process.env.ts_node_install_lock as string;\nconst lockPath = join(__dirname, ts_node_install_lock);\n\ninterface InstallationResult {\n  error: string | null;\n}\n\n/**\n * Pack and install ts-node locally, necessary to test package \"exports\"\n * FS locking b/c tests run in separate processes\n */\nexport async function installTsNode() {\n  await lockedMemoizedOperation(lockPath, async () => {\n    const totalTries = process.platform === 'win32' ? 5 : 1;\n    let tries = 0;\n    while (true) {\n      try {\n        rimrafSync(join(TEST_DIR, 'node_modules'));\n        await promisify(childProcessExec)(`npm install`, { cwd: TEST_DIR });\n        const packageLockPath = join(TEST_DIR, 'package-lock.json');\n        existsSync(packageLockPath) && unlinkSync(packageLockPath);\n        break;\n      } catch (e) {\n        tries++;\n        if (tries >= totalTries) throw e;\n      }\n    }\n  });\n}\n\n/**\n * Attempt an operation once across multiple processes, using filesystem locking.\n * If it was executed already by another process, and it errored, throw the same error message.\n */\nasync function lockedMemoizedOperation(\n  lockPath: string,\n  operation: () => Promise<void>\n) {\n  const releaseLock = await lock(lockPath, {\n    realpath: false,\n    stale: 120e3,\n    retries: {\n      retries: 120,\n      maxTimeout: 1000,\n    },\n  });\n  try {\n    const operationHappened = existsSync(lockPath);\n    if (operationHappened) {\n      const result: InstallationResult = JSON.parse(\n        readFileSync(lockPath, 'utf8')\n      );\n      if (result.error) throw result.error;\n    } else {\n      const result: InstallationResult = { error: null };\n      try {\n        await operation();\n      } catch (e) {\n        result.error = `${e}`;\n        throw e;\n      } finally {\n        writeFileSync(lockPath, JSON.stringify(result));\n      }\n    }\n  } finally {\n    releaseLock();\n  }\n}\n\n/**\n * Get a stream into a string.\n * Will resolve early if\n */\nexport function getStream(stream: Readable, waitForPattern?: string | RegExp) {\n  let resolve: (value: string) => void;\n  const promise = new Promise<string>((res) => {\n    resolve = res;\n  });\n  const received: Buffer[] = [];\n  let combinedBuffer: Buffer = Buffer.concat([]);\n  let combinedString: string = '';\n\n  stream.on('data', (data) => {\n    received.push(data);\n    combine();\n    if (\n      (typeof waitForPattern === 'string' &&\n        combinedString.indexOf(waitForPattern) >= 0) ||\n      (waitForPattern instanceof RegExp && combinedString.match(waitForPattern))\n    )\n      resolve(combinedString);\n    combinedBuffer = Buffer.concat(received);\n  });\n  stream.on('end', () => {\n    resolve(combinedString);\n  });\n\n  return promise;\n\n  function combine() {\n    combinedBuffer = Buffer.concat(received);\n    combinedString = combinedBuffer.toString('utf8');\n  }\n}\n\nconst defaultRequireExtensions = captureObjectState(require.extensions);\nconst defaultProcess = captureObjectState(process);\nconst defaultModule = captureObjectState(require('module'));\nconst defaultError = captureObjectState(Error);\nconst defaultGlobal = captureObjectState(global);\n\n/**\n * Undo all of ts-node & co's installed hooks, resetting the node environment to default\n * so we can run multiple test cases which `.register()` ts-node.\n *\n * Must also play nice with `nyc`'s environmental mutations.\n */\nexport function resetNodeEnvironment() {\n  // We must uninstall so that it resets its internal state; otherwise it won't know it needs to reinstall in the next test.\n  require('@cspotcode/source-map-support').uninstall();\n\n  // Modified by ts-node hooks\n  resetObject(require.extensions, defaultRequireExtensions);\n\n  // ts-node attaches a property when it registers an instance\n  // source-map-support monkey-patches the emit function\n  resetObject(process, defaultProcess);\n\n  // source-map-support swaps out the prepareStackTrace function\n  resetObject(Error, defaultError);\n\n  // _resolveFilename is modified by tsconfig-paths, future versions of source-map-support, and maybe future versions of ts-node\n  resetObject(require('module'), defaultModule);\n\n  // May be modified by REPL tests, since the REPL sets globals.\n  resetObject(global, defaultGlobal);\n}\n\nfunction captureObjectState(object: any) {\n  return {\n    descriptors: Object.getOwnPropertyDescriptors(object),\n    values: { ...object },\n  };\n}\n// Redefine all property descriptors and delete any new properties\nfunction resetObject(\n  object: any,\n  state: ReturnType<typeof captureObjectState>\n) {\n  const currentDescriptors = Object.getOwnPropertyDescriptors(object);\n  for (const key of Object.keys(currentDescriptors)) {\n    if (!has(state.descriptors, key)) {\n      delete object[key];\n    }\n  }\n  // Trigger nyc's setter functions\n  for (const [key, value] of Object.entries(state.values)) {\n    try {\n      object[key] = value;\n    } catch {}\n  }\n  // Reset descriptors\n  Object.defineProperties(object, state.descriptors);\n}\n"]}