{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/test/repl/helpers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA4C;AAC5C,mCAAqC;AACrC,wCAA8D;AAgB9D;;GAEG;AACH,SAAsB,kBAAkB,CACtC,CAA+C;;QAE/C,MAAM,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC;QACtC,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC;QAE3C,SAAS,gBAAgB,CAAC,EACxB,aAAa,EACb,cAAc,EACd,iBAAiB,GACO;YACxB,MAAM,KAAK,GAAG,IAAI,oBAAW,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;YACjC,MAAM,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;YACjC,MAAM,WAAW,GAAG,eAAe,CAAC,UAAU,iBAC5C,KAAK;gBACL,MAAM;gBACN,MAAM,IACH,cAAc,EACjB,CAAC;YACH,MAAM,OAAO,GAAG,CAAC,aAAa;gBAC5B,CAAC,CAAC,eAAe,CAAC,QAAQ;gBAC1B,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,6DACtB,WAAW,CAAC,oBAAoB,KACnC,OAAO,EAAE,GAAG,kBAAQ,gBAAgB,KACjC,iBAAiB,KACpB,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAC1D,CAAC;YACH,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC,CAAC,QAAQ,CAAC,GAAS,EAAE;gBACpB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC,CAAA,CAAC,CAAC;YAEH,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC;QACzD,CAAC;QAED,iCAAiC;QACjC,SAAe,aAAa,CAC1B,KAAa,EACb,OAOC;;gBAED,MAAM,EACJ,WAAW;gBACX,kDAAkD;gBAClD,MAAM,GAAG,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EACzC,oBAAoB,KAElB,OAAO,EADN,IAAI,UACL,OAAO,EANL,iDAML,CAAU,CAAC;gBACZ,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAEtE,IAAI,oBAAoB,EAAE;oBACxB,WAAW,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;iBACjD;qBAAM;oBACL,WAAW,CAAC,KAAK,EAAE,CAAC;iBACrB;gBAED,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACnB,KAAK,CAAC,GAAG,EAAE,CAAC;gBACZ,MAAM,aAAa,GAAG,IAAA,mBAAS,EAAC,MAAM,EAAE,WAAW,CAAC,CAAC;gBACrD,MAAM,aAAa,GAAG,IAAA,mBAAS,EAAC,MAAM,EAAE,WAAW,CAAC,CAAC;gBACrD,qEAAqE;gBACrE,MAAM,OAAO,CAAC,IAAI,CAAC;oBACjB,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;oBAC7B,aAAa;oBACb,aAAa;iBACd,CAAC,CAAC;gBACH,MAAM,CAAC,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,GAAG,EAAE,CAAC;gBAEb,OAAO;oBACL,KAAK;oBACL,MAAM,EAAE,MAAM,aAAa;oBAC3B,MAAM,EAAE,MAAM,aAAa;iBAC5B,CAAC;YACJ,CAAC;SAAA;IACH,CAAC;CAAA;AAlFD,gDAkFC","sourcesContent":["import * as promisify from 'util.promisify';\nimport { PassThrough } from 'stream';\nimport { getStream, TEST_DIR, tsNodeTypes } from '../helpers';\nimport type { ExecutionContext } from 'ava';\n\nexport interface ContextWithTsNodeUnderTest {\n  tsNodeUnderTest: Pick<\n    typeof tsNodeTypes,\n    'create' | 'register' | 'createRepl'\n  >;\n}\n\nexport interface CreateReplViaApiOptions {\n  registerHooks: true;\n  createReplOpts?: Partial<tsNodeTypes.CreateReplOptions>;\n  createServiceOpts?: Partial<tsNodeTypes.CreateOptions>;\n}\n\n/**\n * pass to test.context() to get REPL testing helper functions\n */\nexport async function contextReplHelpers(\n  t: ExecutionContext<ContextWithTsNodeUnderTest>\n) {\n  const { tsNodeUnderTest } = t.context;\n  return { createReplViaApi, executeInRepl };\n\n  function createReplViaApi({\n    registerHooks,\n    createReplOpts,\n    createServiceOpts,\n  }: CreateReplViaApiOptions) {\n    const stdin = new PassThrough();\n    const stdout = new PassThrough();\n    const stderr = new PassThrough();\n    const replService = tsNodeUnderTest.createRepl({\n      stdin,\n      stdout,\n      stderr,\n      ...createReplOpts,\n    });\n    const service = (registerHooks\n      ? tsNodeUnderTest.register\n      : tsNodeUnderTest.create)({\n      ...replService.evalAwarePartialHost,\n      project: `${TEST_DIR}/tsconfig.json`,\n      ...createServiceOpts,\n      tsTrace: replService.console.log.bind(replService.console),\n    });\n    replService.setService(service);\n    t.teardown(async () => {\n      service.enabled(false);\n    });\n\n    return { stdin, stdout, stderr, replService, service };\n  }\n\n  // Todo combine with replApiMacro\n  async function executeInRepl(\n    input: string,\n    options: CreateReplViaApiOptions & {\n      waitMs?: number;\n      waitPattern?: string | RegExp;\n      /** When specified, calls `startInternal` instead of `start` and passes options */\n      startInternalOptions?: Parameters<\n        tsNodeTypes.ReplService['startInternal']\n      >[0];\n    }\n  ) {\n    const {\n      waitPattern,\n      // Wait longer if there's a signal to end it early\n      waitMs = waitPattern != null ? 20e3 : 1e3,\n      startInternalOptions,\n      ...rest\n    } = options;\n    const { stdin, stdout, stderr, replService } = createReplViaApi(rest);\n\n    if (startInternalOptions) {\n      replService.startInternal(startInternalOptions);\n    } else {\n      replService.start();\n    }\n\n    stdin.write(input);\n    stdin.end();\n    const stdoutPromise = getStream(stdout, waitPattern);\n    const stderrPromise = getStream(stderr, waitPattern);\n    // Wait for expected output pattern or timeout, whichever comes first\n    await Promise.race([\n      promisify(setTimeout)(waitMs),\n      stdoutPromise,\n      stderrPromise,\n    ]);\n    stdout.end();\n    stderr.end();\n\n    return {\n      stdin,\n      stdout: await stdoutPromise,\n      stderr: await stderrPromise,\n    };\n  }\n}\n"]}