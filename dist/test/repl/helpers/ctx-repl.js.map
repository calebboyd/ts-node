{"version":3,"file":"ctx-repl.js","sourceRoot":"","sources":["../../../../src/test/repl/helpers/ctx-repl.ts"],"names":[],"mappings":";;;AACA,4DAAwD;AACxD,mCAAqC;AAErC,6CAAwD;AACxD,+CAA+C;AAoB/C;;GAEG;AACI,KAAK,UAAU,OAAO,CAAC,CAAc;IAC1C,MAAM,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC;IACtC,OAAO,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC;IAE3C,SAAS,gBAAgB,CAAC,EAAE,aAAa,EAAE,cAAc,EAAE,iBAAiB,EAA2B;QACrG,MAAM,KAAK,GAAG,IAAI,oBAAW,EAAE,CAAC;QAChC,MAAM,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;QACjC,MAAM,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;QACjC,MAAM,WAAW,GAAG,eAAe,CAAC,UAAU,CAAC;YAC7C,KAAK;YACL,MAAM;YACN,MAAM;YACN,GAAG,cAAc;SAClB,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAClF,GAAG,WAAW,CAAC,oBAAoB;YACnC,OAAO,EAAE,GAAG,gBAAQ,gBAAgB;YACpC,GAAG,iBAAiB;YACpB,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;SAC3D,CAAC,CAAC;QACH,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;YACpB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC;IACzD,CAAC;IAED,KAAK,UAAU,aAAa,CAAC,KAAa,EAAE,OAA6B;QACvE,MAAM,EACJ,WAAW;QACX,kDAAkD;QAClD,MAAM,GAAG,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EACzC,oBAAoB,EACpB,GAAG,IAAI,EACR,GAAG,OAAO,CAAC;QACZ,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAEtE,IAAI,oBAAoB,EAAE;YACxB,WAAW,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;SACjD;aAAM;YACL,WAAW,CAAC,KAAK,EAAE,CAAC;SACrB;QAED,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,CAAC,GAAG,EAAE,CAAC;QACZ,MAAM,aAAa,GAAG,IAAA,4BAAY,EAAC,MAAM,CAAC,CAAC;QAC3C,MAAM,aAAa,GAAG,IAAA,4BAAY,EAAC,MAAM,CAAC,CAAC;QAC3C,qEAAqE;QACrE,MAAM,OAAO,CAAC,IAAI,CAAC;YACjB,IAAA,YAAK,EAAC,MAAM,CAAC;YACb,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa;YACrE,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,aAAa;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,EAAE,CAAC;QACb,MAAM,CAAC,GAAG,EAAE,CAAC;QAEb,OAAO;YACL,KAAK;YACL,MAAM,EAAE,MAAM,aAAa;YAC3B,MAAM,EAAE,MAAM,aAAa;SAC5B,CAAC;IACJ,CAAC;AACH,CAAC;AA/DD,0BA+DC","sourcesContent":["import type { ExecutionContext } from '@cspotcode/ava-lib';\nimport { expectStream } from '@cspotcode/expect-stream';\nimport { PassThrough } from 'stream';\nimport type { ctxTsNode } from '../../helpers/ctx-ts-node';\nimport { delay, tsNodeTypes } from '../../helpers/misc';\nimport { TEST_DIR } from '../../helpers/paths';\n\nexport interface CreateReplViaApiOptions {\n  registerHooks: boolean;\n  createReplOpts?: Partial<tsNodeTypes.CreateReplOptions>;\n  createServiceOpts?: Partial<tsNodeTypes.CreateOptions>;\n}\n\nexport interface ExecuteInReplOptions extends CreateReplViaApiOptions {\n  waitMs?: number;\n  waitPattern?: string | RegExp;\n  /** When specified, calls `startInternal` instead of `start` and passes options */\n  startInternalOptions?: Parameters<tsNodeTypes.ReplService['startInternal']>[0];\n}\n\nexport namespace ctxRepl {\n  export type Ctx = ctxTsNode.Ctx & Awaited<ReturnType<typeof ctxRepl>>;\n  export type T = ExecutionContext<Ctx>;\n}\n\n/**\n * pass to test.context() to get REPL testing helper functions\n */\nexport async function ctxRepl(t: ctxTsNode.T) {\n  const { tsNodeUnderTest } = t.context;\n  return { createReplViaApi, executeInRepl };\n\n  function createReplViaApi({ registerHooks, createReplOpts, createServiceOpts }: CreateReplViaApiOptions) {\n    const stdin = new PassThrough();\n    const stdout = new PassThrough();\n    const stderr = new PassThrough();\n    const replService = tsNodeUnderTest.createRepl({\n      stdin,\n      stdout,\n      stderr,\n      ...createReplOpts,\n    });\n    const service = (registerHooks ? tsNodeUnderTest.register : tsNodeUnderTest.create)({\n      ...replService.evalAwarePartialHost,\n      project: `${TEST_DIR}/tsconfig.json`,\n      ...createServiceOpts,\n      tsTrace: replService.console.log.bind(replService.console),\n    });\n    replService.setService(service);\n    t.teardown(async () => {\n      service.enabled(false);\n    });\n\n    return { stdin, stdout, stderr, replService, service };\n  }\n\n  async function executeInRepl(input: string, options: ExecuteInReplOptions) {\n    const {\n      waitPattern,\n      // Wait longer if there's a signal to end it early\n      waitMs = waitPattern != null ? 20e3 : 1e3,\n      startInternalOptions,\n      ...rest\n    } = options;\n    const { stdin, stdout, stderr, replService } = createReplViaApi(rest);\n\n    if (startInternalOptions) {\n      replService.startInternal(startInternalOptions);\n    } else {\n      replService.start();\n    }\n\n    stdin.write(input);\n    stdin.end();\n    const stdoutPromise = expectStream(stdout);\n    const stderrPromise = expectStream(stderr);\n    // Wait for expected output pattern or timeout, whichever comes first\n    await Promise.race([\n      delay(waitMs),\n      waitPattern != null ? stdoutPromise.wait(waitPattern) : stdoutPromise,\n      waitPattern != null ? stderrPromise.wait(waitPattern) : stderrPromise,\n    ]);\n    stdout.end();\n    stderr.end();\n\n    return {\n      stdin,\n      stdout: await stdoutPromise,\n      stderr: await stderrPromise,\n    };\n  }\n}\n"]}