{"version":3,"file":"macros.js","sourceRoot":"","sources":["../../../../src/test/repl/helpers/macros.ts"],"names":[],"mappings":";;;AACA,2CAA6C;AAEhC,QAAA,kCAAkC,GAAG,cAAI,CAAC,KAAK,CAC1D,CAAC,MAAc,EAAE,QAAgB,EAAE,OAAuC,EAAE,EAAE,CAAC,KAAK,EAAE,CAAY,EAAE,EAAE;IACpG,iBAAiB,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACvE,CAAC,CACF,CAAC;AACW,QAAA,uBAAuB,GAAG,cAAI,CAAC,KAAK,CAC/C,CAAC,MAAc,EAAE,aAAqB,EAAE,OAAuC,EAAE,EAAE,CAAC,KAAK,EAAE,CAAY,EAAE,EAAE;IACzG,iBAAiB,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;AACjF,CAAC,CACF,CAAC;AAEF,KAAK,UAAU,iBAAiB,CAC9B,CAAY,EACZ,MAAc,EACd,cAAkC,EAClC,cAAkC,EAClC,WAAmB,EACnB,OAAuC;IAEvC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE;QAC9C,aAAa,EAAE,IAAI;QACnB,oBAAoB,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;QAC1C,WAAW;QACX,GAAG,OAAO;KACX,CAAC,CAAC;IACH,IAAI,cAAc;QAAE,IAAA,gBAAM,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;;QAC1D,IAAA,gBAAM,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,cAAc;QAAE,IAAA,gBAAM,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;AACjE,CAAC","sourcesContent":["import type { ctxRepl, ExecuteInReplOptions } from './ctx-repl';\nimport { expect, test } from '../../testlib';\n\nexport const macroReplNoErrorsAndStdoutContains = test.macro(\n  (script: string, contains: string, options?: Partial<ExecuteInReplOptions>) => async (t: ctxRepl.T) => {\n    macroReplInternal(t, script, contains, undefined, contains, options);\n  }\n);\nexport const macroReplStderrContains = test.macro(\n  (script: string, errorContains: string, options?: Partial<ExecuteInReplOptions>) => async (t: ctxRepl.T) => {\n    macroReplInternal(t, script, undefined, errorContains, errorContains, options);\n  }\n);\n\nasync function macroReplInternal(\n  t: ctxRepl.T,\n  script: string,\n  stdoutContains: string | undefined,\n  stderrContains: string | undefined,\n  waitPattern: string,\n  options?: Partial<ExecuteInReplOptions>\n) {\n  const r = await t.context.executeInRepl(script, {\n    registerHooks: true,\n    startInternalOptions: { useGlobal: false },\n    waitPattern,\n    ...options,\n  });\n  if (stderrContains) expect(r.stderr).toContain(stderrContains);\n  else expect(r.stderr).toBe('');\n  if (stdoutContains) expect(r.stdout).toContain(stdoutContains);\n}\n"]}