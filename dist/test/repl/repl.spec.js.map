{"version":3,"file":"repl.spec.js","sourceRoot":"","sources":["../../../src/test/repl/repl.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, expect } from '../testlib';\nimport {\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  delay,\n  resetNodeEnvironment,\n  ts,\n  tsSupportsMtsCtsExtensions,\n} from '../helpers';\nimport semver = require('semver');\nimport { CMD_TS_NODE_WITH_PROJECT_FLAG, ctxTsNode, TEST_DIR } from '../helpers';\nimport { createExec, createExecTester } from '../helpers/exec';\nimport { upstreamTopLevelAwaitTests } from './node-repl-tla';\nimport { replFile } from './helpers/misc';\nimport { expectStream } from '@cspotcode/expect-stream';\nimport { join } from 'path';\nimport { ctxRepl } from './helpers/ctx-repl';\nimport { macroReplNoErrorsAndStdoutContains, macroReplStderrContains } from './helpers/macros';\n\nconst test = context(ctxTsNode).contextEach(ctxRepl);\ntest.serial();\ntest.beforeEach(async (t) => {\n  t.teardown(() => {\n    resetNodeEnvironment();\n    // Useful for debugging memory leaks.  Leaving in case I need it again.\n    // global.gc(); // Requires adding nodeArguments: ['--expose-gc'] to ava config\n    // console.dir(process.memoryUsage().heapUsed / 1000 / 1000);\n  });\n});\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\nconst execTester = createExecTester({\n  cmd: CMD_TS_NODE_WITH_PROJECT_FLAG,\n  exec,\n});\n\ntest('should run REPL when --interactive passed and stdin is not a TTY', async () => {\n  const p = exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --interactive`);\n  p.child.stdin!.end('console.log(\"123\")\\n');\n  const r = await p;\n  expect(r.err).toBe(null);\n  expect(r.stdout).toBe('> 123\\n' + 'undefined\\n' + '> ');\n});\n\ntest('should echo a value when using the swc transpiler', async () => {\n  const p = exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --interactive  --transpiler ts-node/transpilers/swc-experimental`);\n  p.child.stdin!.end('400\\n401\\n');\n  const r = await p;\n  expect(r.err).toBe(null);\n  expect(r.stdout).toBe('> 400\\n> 401\\n> ');\n});\n\ntest('REPL has command to get type information', async () => {\n  const p = exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --interactive`);\n  p.child.stdin!.end('\\nconst a = 123\\n.type a');\n  const r = await p;\n  expect(r.err).toBe(null);\n  expect(r.stdout).toBe('> undefined\\n' + '> undefined\\n' + '> const a: 123\\n' + '> ');\n});\n\n// Serial because it's timing-sensitive\ntest.serial('REPL can be configured on `start`', async (t) => {\n  const prompt = '#> ';\n\n  const r = await t.context.executeInRepl(`const x = 3\\n'done'`, {\n    waitPattern: \"'done'\\n#> \",\n    registerHooks: true,\n    startInternalOptions: {\n      prompt,\n      ignoreUndefined: true,\n    },\n  });\n\n  expect(r.stderr).toBe('');\n  expect(r.stdout).toBe(`${prompt}${prompt}'done'\\n#> `);\n});\n\n// Serial because it's timing-sensitive\ntest.serial('REPL uses a different context when `useGlobal` is false', async (t) => {\n  const r = await t.context.executeInRepl(\n    // No error when re-declaring x\n    'const x = 3\\n' +\n      // console.log ouput will end up in the stream and not in test output\n      'console.log(1)\\n',\n    {\n      registerHooks: true,\n      waitPattern: `> undefined\\n> 1\\nundefined\\n> `,\n      startInternalOptions: {\n        useGlobal: false,\n      },\n    }\n  );\n\n  expect(r.stderr).toBe('');\n  expect(r.stdout).toBe(`> undefined\\n> 1\\nundefined\\n> `);\n});\n\n// Serial because it's timing-sensitive\ntest.serial('REPL can be created via API', async (t) => {\n  const r = await t.context.executeInRepl(`\\nconst a = 123\\n.type a\\n`, {\n    registerHooks: true,\n    waitPattern: '123\\n> ',\n  });\n  expect(r.stderr).toBe('');\n  expect(r.stdout).toBe('> undefined\\n' + '> undefined\\n' + '> const a: 123\\n' + '> ');\n});\n\ntest.suite('top level await', ({ contextEach }) => {\n  const compilerOptions = {\n    target: 'es2018',\n  };\n  const test = contextEach(async (t) => {\n    return { executeInTlaRepl };\n\n    function executeInTlaRepl(input: string, waitPattern?: string | RegExp) {\n      return t.context.executeInRepl(\n        input\n          .split('\\n')\n          .map((line) => line.trim())\n          // Restore newline once https://github.com/nodejs/node/pull/39392 is merged\n          .join(''),\n        {\n          registerHooks: true,\n          waitPattern,\n          createServiceOpts: {\n            experimentalReplAwait: true,\n            compilerOptions,\n          },\n          startInternalOptions: { useGlobal: false },\n        }\n      );\n    }\n  });\n\n  // Serial because it's timing-sensitive\n  test.serial('should allow evaluating top level await', async (t) => {\n    const script = `\n        const x: number = await new Promise((r) => r(1));\n        for await (const x of [1,2,3]) { console.log(x) };\n        for (const x of ['a', 'b']) { await x; console.log(x) };\n        class Foo {}; await 1;\n        function Bar() {}; await 2;\n        const {y} = await ({y: 2});\n        const [z] = await [3];\n        x + y + z;\n      `;\n\n    const r = await t.context.executeInTlaRepl(script, '6\\n> ');\n    expect(r.stderr).toBe('');\n    expect(r.stdout).toBe('> 1\\n2\\n3\\na\\nb\\n6\\n> ');\n  });\n\n  // Serial because it's timing-sensitive\n  test.serial('should wait until promise is settled when awaiting at top level', async (t) => {\n    const awaitMs = 500;\n    const script = `\n          const startTime = new Date().getTime();\n          await new Promise((r) => setTimeout(() => r(1), ${awaitMs}));\n          const endTime = new Date().getTime();\n          endTime - startTime;\n        `;\n    const r = await t.context.executeInTlaRepl(script, /\\d+\\n/);\n\n    expect(r.stderr).toBe('');\n\n    const elapsedTimeString = r.stdout.split('\\n')[0].replace('> ', '').trim();\n    expect(elapsedTimeString).toMatch(/^\\d+$/);\n    const elapsedTime = Number(elapsedTimeString);\n    expect(elapsedTime).toBeGreaterThanOrEqual(awaitMs - 50);\n    // When CI is taxed, the time may be *much* greater than expected.\n    // I can't think of a case where the time being *too high* is a bug\n    // that this test can catch.  So I've made this check very loose.\n    expect(elapsedTime).toBeLessThanOrEqual(awaitMs + 10e3);\n  });\n\n  // Serial because it's timing-sensitive\n  test.serial('should not wait until promise is settled when not using await at top level', async (t) => {\n    const script = `\n          const startTime = new Date().getTime();\n          (async () => await new Promise((r) => setTimeout(() => r(1), ${5000})))();\n          const endTime = new Date().getTime();\n          endTime - startTime;\n        `;\n    const r = await t.context.executeInTlaRepl(script, /\\d+\\n/);\n\n    expect(r.stderr).toBe('');\n\n    const ellapsedTime = Number(r.stdout.split('\\n')[0].replace('> ', '').trim());\n    expect(ellapsedTime).toBeGreaterThanOrEqual(0);\n    // Should ideally be instantaneous; leave wiggle-room for slow CI\n    expect(ellapsedTime).toBeLessThanOrEqual(100);\n  });\n\n  // Serial because it's timing-sensitive\n  test.serial('should error with typing information when awaited result has type mismatch', async (t) => {\n    const r = await t.context.executeInTlaRepl('const x: string = await 1', 'error');\n\n    expect(r.stdout).toBe('> > ');\n    expect(r.stderr.replace(/\\r\\n/g, '\\n')).toBe(\n      `${replFile}(4,7): error TS2322: ` +\n        (semver.gte(ts.version, '4.0.0')\n          ? `Type 'number' is not assignable to type 'string'.\\n`\n          : `Type '1' is not assignable to type 'string'.\\n`) +\n        '\\n'\n    );\n  });\n\n  // Serial because it's timing-sensitive\n  test.serial('should error with typing information when importing a file with type errors', async (t) => {\n    const r = await t.context.executeInTlaRepl(`const {foo} = await import('./repl/tla-import');`, 'error');\n\n    expect(r.stdout).toBe('> > ');\n    expect(r.stderr.replace(/\\r\\n/g, '\\n')).toBe(\n      'repl/tla-import.ts(1,14): error TS2322: ' +\n        (semver.gte(ts.version, '4.0.0')\n          ? `Type 'number' is not assignable to type 'string'.\\n`\n          : `Type '1' is not assignable to type 'string'.\\n`) +\n        '\\n'\n    );\n  });\n\n  test('should pass upstream test cases', async (t) => {\n    const { tsNodeUnderTest } = t.context;\n    await upstreamTopLevelAwaitTests({ TEST_DIR, tsNodeUnderTest });\n  });\n});\n\ntest.suite('REPL ignores diagnostics that are annoying in interactive sessions', (test) => {\n  const code = `function foo() {};\\nfunction foo() {return 123};\\nconsole.log(foo());\\n`;\n  const diagnosticMessage = `Duplicate function implementation`;\n  test('interactive repl should ignore them', async (t) => {\n    const r = await execTester({\n      flags: '-i',\n      stdin: code,\n    });\n    expect(r.stdout).not.toContain(diagnosticMessage);\n  });\n  test('interactive repl should not ignore them if they occur in other files', async (t) => {\n    const r = await execTester({\n      flags: '-i',\n      stdin: `import './repl-ignored-diagnostics/index';\\n`,\n    });\n    expect(r.stderr).toContain(diagnosticMessage);\n  });\n  test('[stdin] should not ignore them', async (t) => {\n    const r = await execTester({\n      stdin: code,\n      expectError: true,\n    });\n    expect(r.stderr).toContain(diagnosticMessage);\n  });\n  test('[eval] should not ignore them', async (t) => {\n    const r = await execTester({\n      flags: `-e \"${code.replace(/\\n/g, '')}\"`,\n      expectError: true,\n    });\n    expect(r.stderr).toContain(diagnosticMessage);\n  });\n});\n\ntest.suite('REPL inputs are syntactically independent of each other', (test) => {\n  // Serial because they're timing-sensitive\n  test.serial();\n\n  test('arithmetic operators are independent of previous values', async (t) => {\n    const r = await t.context.executeInRepl(\n      `9\n          + 3\n          7\n          - 3\n          3\n          * 7\\n.break\n          100\n          / 2\\n.break\n          5\n          ** 2\\n.break\n          console.log('done!')\n          `,\n      {\n        registerHooks: true,\n        startInternalOptions: { useGlobal: false },\n        waitPattern: 'done!\\nundefined\\n>',\n      }\n    );\n    expect(r.stdout).not.toContain('12');\n    expect(r.stdout).not.toContain('4');\n    expect(r.stdout).not.toContain('21');\n    expect(r.stdout).not.toContain('50');\n    expect(r.stdout).not.toContain('25');\n    expect(r.stdout).toContain('3');\n    expect(r.stdout).toContain('-3');\n  });\n\n  test('automatically inserted semicolons do not appear in error messages at the end', async (t) => {\n    const r = await t.context.executeInRepl(\n      `(\n          a\n          console.log('done!')`,\n      {\n        registerHooks: true,\n        startInternalOptions: { useGlobal: false },\n        waitPattern: 'done!\\nundefined\\n>',\n      }\n    );\n    expect(r.stderr).toContain(\"error TS1005: ')' expected.\");\n    expect(r.stderr).not.toContain(';');\n  });\n\n  test('automatically inserted semicolons do not appear in error messages at the start', async (t) => {\n    const r = await t.context.executeInRepl(\n      `)\n          console.log('done!')`,\n      {\n        registerHooks: true,\n        startInternalOptions: { useGlobal: false },\n        waitPattern: 'done!\\nundefined\\n>',\n      }\n    );\n    expect(r.stderr).toContain('error TS1128: Declaration or statement expected.');\n    expect(r.stderr).toContain(')');\n    expect(r.stderr).not.toContain(';');\n  });\n\n  test('automatically inserted semicolons do not break function calls', async (t) => {\n    const r = await t.context.executeInRepl(\n      `function foo(a: number) {\n              return a + 1;\n          }\n          foo(\n            1\n          )`,\n      {\n        registerHooks: true,\n        startInternalOptions: { useGlobal: false },\n        waitPattern: '2\\n>',\n      }\n    );\n    expect(r.stderr).toBe('');\n    expect(r.stdout).toContain('2');\n  });\n\n  test('automatically inserted semicolons do not affect subsequent line numbers', async (t) => {\n    // If first line of input ends in a semicolon, should not add a second semicolon.\n    // That will cause an extra blank line in the compiled output which will\n    // offset the stack line number.\n    const r = await t.context.executeInRepl(\n      `1;\n          new Error().stack!.split('\\\\n')[1]\n          console.log('done!')`,\n      {\n        registerHooks: true,\n        startInternalOptions: { useGlobal: false },\n        waitPattern: 'done!',\n      }\n    );\n    expect(r.stderr).toBe('');\n    expect(r.stdout).toContain(\":1:1'\\n\");\n  });\n});\n\ntest.suite('Multiline inputs and RECOVERY_CODES', (test) => {\n  test.serial();\n  test(\n    'multiline function args declaration',\n    macroReplNoErrorsAndStdoutContains,\n    `\n      function myFn(\n        a: string,\n        b: string\n      ) {\n        return a + ' ' + b\n      }\n      myFn('test', '!')\n    `,\n    'test !'\n  );\n\n  test(\n    'Conditional recovery codes: this one-liner *should* raise an error; should not be recoverable',\n    macroReplStderrContains,\n    `\n      (a: any) => a = null;\n    `,\n    'error TS',\n    {\n      createServiceOpts: { compilerOptions: { strictNullChecks: false } },\n    }\n  );\n});\n\ntest.suite('REPL works with traceResolution', (test) => {\n  test.serial('startup traces should print before the prompt appears when traceResolution is enabled', async (t) => {\n    const repl = t.context.createReplViaApi({\n      registerHooks: false,\n      createServiceOpts: {\n        compilerOptions: {\n          traceResolution: true,\n        },\n      },\n    });\n\n    repl.replService.start();\n\n    repl.stdin.end();\n\n    await delay(3e3);\n\n    repl.stdout.end();\n    const stdout = await expectStream(repl.stdout);\n\n    expect(stdout).toContain('======== Resolving module');\n    expect(stdout.endsWith('> ')).toBe(true);\n  });\n\n  test.serial('traces should NOT appear when traceResolution is not enabled', async (t) => {\n    const r = await t.context.executeInRepl('1', {\n      registerHooks: true,\n      startInternalOptions: { useGlobal: false },\n      waitPattern: '1\\n>',\n    });\n    expect(r.stderr).toBe('');\n    expect(r.stdout).not.toContain('======== Resolving module');\n  });\n});\n\ntest.suite('REPL declares types for node built-ins within REPL', (test) => {\n  test.serial();\n  test('enabled when typechecking', async (t) => {\n    const r = await t.context.executeInRepl(\n      `util.promisify(setTimeout)(\"should not be a string\" as string)\n      type Duplex = stream.Duplex\n      const s = stream\n      'done'`,\n      {\n        registerHooks: true,\n        waitPattern: `done`,\n        startInternalOptions: {\n          useGlobal: false,\n        },\n      }\n    );\n\n    // Assert that we receive a typechecking error about improperly using\n    // `util.promisify` but *not* an error about the absence of `util`\n    expect(r.stderr).not.toMatch(\"Cannot find name 'util'\");\n    expect(r.stderr).toMatch(\"Argument of type 'string' is not assignable to parameter of type 'number'\");\n    // Assert that both types and values can be used without error\n    expect(r.stderr).not.toMatch(\"Cannot find namespace 'stream'\");\n    expect(r.stderr).not.toMatch(\"Cannot find name 'stream'\");\n    expect(r.stdout).toMatch(`done`);\n  });\n\n  test('disabled in transpile-only mode, to avoid breaking third-party SWC transpiler which rejects `declare import` syntax', async (t) => {\n    const r = await t.context.executeInRepl(\n      `type Duplex = stream.Duplex\n      const s = stream\n      'done'`,\n      {\n        createServiceOpts: {\n          swc: true,\n        },\n        registerHooks: true,\n        waitPattern: `'done'\\n> `,\n        startInternalOptions: {\n          useGlobal: false,\n        },\n      }\n    );\n\n    // Assert that we do not get errors about `declare import` syntax from swc\n    expect(r.stdout).toBe(\"> undefined\\n> undefined\\n> 'done'\\n> \");\n    expect(r.stderr).toBe('');\n  });\n});\n\ntest.suite('REPL treats object literals and block scopes correctly', (test) => {\n  test(\n    'repl should treat { key: 123 } as object literal',\n    macroReplNoErrorsAndStdoutContains,\n    '{ key: 123 }',\n    '{ key: 123 }'\n  );\n  test(\n    'repl should treat ({ key: 123 }) as object literal',\n    macroReplNoErrorsAndStdoutContains,\n    '({ key: 123 })',\n    '{ key: 123 }'\n  );\n  test(\n    'repl should treat ({ let v = 0; v; }) as object literal and error',\n    macroReplStderrContains,\n    '({ let v = 0; v; })',\n    'No value exists in scope for the shorthand property'\n  );\n  test(\n    'repl should treat { let v = 0; v; } as block scope',\n    macroReplNoErrorsAndStdoutContains,\n    '{ let v = 0; v; }',\n    '0'\n  );\n  test.suite('extra', (test) => {\n    test('repl should treat { key: 123 }; as block scope', macroReplNoErrorsAndStdoutContains, '{ key: 123 };', '123');\n    test(\n      'repl should treat {\\\\nkey: 123\\\\n}; as block scope',\n      macroReplNoErrorsAndStdoutContains,\n      '{\\nkey: 123\\n};',\n      '123'\n    );\n    test(\n      'repl should treat { key: 123 }[] as block scope (edge case)',\n      macroReplNoErrorsAndStdoutContains,\n      '{ key: 123 }[]',\n      '[]'\n    );\n  });\n  test.suite('multiline', (test) => {\n    test(\n      'repl should treat {\\\\nkey: 123\\\\n} as object literal',\n      macroReplNoErrorsAndStdoutContains,\n      '{\\nkey: 123\\n}',\n      '{ key: 123 }'\n    );\n    test(\n      'repl should treat ({\\\\nkey: 123\\\\n}) as object literal',\n      macroReplNoErrorsAndStdoutContains,\n      '({\\nkey: 123\\n})',\n      '{ key: 123 }'\n    );\n    test(\n      'repl should treat ({\\\\nlet v = 0;\\\\nv;\\\\n}) as object literal and error',\n      macroReplStderrContains,\n      '({\\nlet v = 0;\\nv;\\n})',\n      'No value exists in scope for the shorthand property'\n    );\n    test(\n      'repl should treat {\\\\nlet v = 0;\\\\nv;\\\\n} as block scope',\n      macroReplNoErrorsAndStdoutContains,\n      '{\\nlet v = 0;\\nv;\\n}',\n      '0'\n    );\n  });\n  test.suite('property access', (test) => {\n    test(\n      'repl should treat { key: 123 }.key as object literal property access',\n      macroReplNoErrorsAndStdoutContains,\n      '{ key: 123 }.key',\n      '123'\n    );\n    test(\n      'repl should treat { key: 123 }[\"key\"] as object literal indexed access',\n      macroReplNoErrorsAndStdoutContains,\n      '{ key: 123 }[\"key\"]',\n      '123'\n    );\n    test(\n      'repl should treat { key: 123 }.foo as object literal non-existent property access',\n      macroReplStderrContains,\n      '{ key: 123 }.foo',\n      \"Property 'foo' does not exist on type\"\n    );\n    test(\n      'repl should treat { key: 123 }[\"foo\"] as object literal non-existent indexed access',\n      macroReplStderrContains,\n      '{ key: 123 }[\"foo\"]',\n      \"Property 'foo' does not exist on type\"\n    );\n  });\n});\n\ntest.suite('repl executes input as cjs even in esm projects', (test) => {\n  test.if(tsSupportsMtsCtsExtensions);\n  test('test', async (t) => {\n    // Must exec child process, because we need a different cwd.\n    const p = exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} -i`, {\n      cwd: join(TEST_DIR, 'repl-in-esm-package'),\n    });\n    p.child.stdin!.write('import fs2 from \"fs\"; fs2.existsSync(\"does not exist\")');\n    p.child.stdin!.end();\n    const r = await p;\n    expect(r.stdout).toBe('> false\\n> ');\n    expect(r.stderr).toBe('');\n  });\n});\n"]}