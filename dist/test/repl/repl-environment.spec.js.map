{"version":3,"file":"repl-environment.spec.js","sourceRoot":"","sources":["../../../src/test/repl/repl-environment.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Tests that the REPL environment is setup correctly:\n * globals, __filename, builtin module accessors.\n */\n\nimport { context, expect } from '../testlib';\nimport { expectStream } from '@cspotcode/expect-stream';\nimport { CMD_TS_NODE_WITH_PROJECT_FLAG, ctxTsNode, delay, TEST_DIR } from '../helpers';\nimport { dirname, join } from 'path';\nimport { createExec, createExecTester } from '../helpers/exec';\nimport { homedir } from 'os';\nimport { replFile } from './helpers/misc';\nimport { ctxRepl } from './helpers/ctx-repl';\n\nconst test = context(ctxTsNode).contextEach(ctxRepl);\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\nconst execTester = createExecTester({\n  cmd: CMD_TS_NODE_WITH_PROJECT_FLAG,\n  exec,\n});\n\ntest.suite('[eval], <repl>, and [stdin] execute with correct globals', (test) => {\n  interface GlobalInRepl extends NodeJS.Global {\n    testReport: any;\n    replReport: any;\n    stdinReport: any;\n    evalReport: any;\n    module: any;\n    exports: any;\n    fs: any;\n    __filename: any;\n    __dirname: any;\n  }\n  const globalInRepl = global as GlobalInRepl;\n  const programmaticTest = test.macro(\n    (\n        {\n          evalCodeBefore,\n          stdinCode,\n          waitFor,\n        }: {\n          evalCodeBefore: string | null;\n          stdinCode: string;\n          waitFor?: () => boolean;\n        },\n        assertions: (stdout: string) => Promise<void> | void\n      ) =>\n      async (t) => {\n        delete globalInRepl.testReport;\n        delete globalInRepl.replReport;\n        delete globalInRepl.stdinReport;\n        delete globalInRepl.evalReport;\n        delete globalInRepl.module;\n        delete globalInRepl.exports;\n        delete globalInRepl.fs;\n        delete globalInRepl.__filename;\n        delete globalInRepl.__dirname;\n        const { stdin, stderr, stdout, replService } = t.context.createReplViaApi({\n          registerHooks: true,\n        });\n        if (typeof evalCodeBefore === 'string') {\n          replService.evalCode(evalCodeBefore);\n        }\n        replService.start();\n        stdin.write(stdinCode);\n        stdin.end();\n        let done = false;\n        await Promise.race([\n          delay(20e3),\n          (async () => {\n            while (!done && !waitFor?.()) {\n              await delay(1e3);\n            }\n          })(),\n        ]);\n        done = true;\n        stdout.end();\n        stderr.end();\n        expect(await expectStream(stderr)).toBe('');\n        await assertions(await expectStream(stdout));\n      }\n  );\n\n  const declareGlobals = `declare var replReport: any, stdinReport: any, evalReport: any, restReport: any, global: any, __filename: any, __dirname: any, module: any, exports: any;`;\n  function setReportGlobal(type: 'repl' | 'stdin' | 'eval') {\n    return `\n            ${declareGlobals}\n            global.${type}Report = {\n              __filename: typeof __filename !== 'undefined' && __filename,\n              __dirname: typeof __dirname !== 'undefined' && __dirname,\n              moduleId: typeof module !== 'undefined' && module.id,\n              modulePath: typeof module !== 'undefined' && module.path,\n              moduleFilename: typeof module !== 'undefined' && module.filename,\n              modulePaths: typeof module !== 'undefined' && [...module.paths],\n              exportsTest: typeof exports !== 'undefined' && typeof module !== 'undefined' ? module.exports === exports : null,\n              stackTest: new Error().stack!.split('\\\\n')[1],\n              moduleAccessorsTest: eval('typeof fs') === 'undefined' ? null : eval('fs') === require('fs'),\n              argv: [...process.argv]\n            };\n          `.replace(/\\n/g, '');\n  }\n  const reportsObject = `\n          {\n            stdinReport: typeof stdinReport !== 'undefined' && stdinReport,\n            evalReport: typeof evalReport !== 'undefined' && evalReport,\n            replReport: typeof replReport !== 'undefined' && replReport\n          }\n        `;\n  const printReports = `\n          ${declareGlobals}\n          console.log(JSON.stringify(${reportsObject}));\n        `.replace(/\\n/g, '');\n  const saveReportsAsGlobal = `\n          ${declareGlobals}\n          global.testReport = ${reportsObject};\n        `.replace(/\\n/g, '');\n\n  function parseStdoutStripReplPrompt(stdout: string) {\n    // Strip node's welcome header, only uncomment if running these tests manually against vanilla node\n    // stdout = stdout.replace(/^Welcome to.*\\nType \"\\.help\" .*\\n/, '');\n    expect(stdout.slice(0, 2)).toBe('> ');\n    expect(stdout.slice(-12)).toBe('undefined\\n> ');\n    return parseStdout(stdout.slice(2, -12));\n  }\n  function parseStdout(stdout: string) {\n    return JSON.parse(stdout);\n  }\n\n  /** Every possible ./node_modules directory ascending upwards starting with ./tests/node_modules */\n  const modulePaths = createModulePaths(TEST_DIR);\n  function createModulePaths(dir: string) {\n    const modulePaths: string[] = [];\n    for (let path = dir; ; path = dirname(path)) {\n      modulePaths.push(join(path, 'node_modules'));\n      if (dirname(path) === path) break;\n    }\n    return modulePaths;\n  }\n\n  // Executable is `ts-node` on Posix, `bin.js` on Windows due to Windows shimming limitations (this is determined by package manager)\n  const tsNodeExe = expect.stringMatching(/\\b(ts-node|bin.js)$/);\n\n  test('stdin', async (t) => {\n    const r = await execTester({\n      stdin: `${setReportGlobal('stdin')};${printReports}`,\n      flags: '',\n    });\n    const report = parseStdout(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: {\n        __filename: '[stdin]',\n        __dirname: '.',\n        moduleId: '[stdin]',\n        modulePath: '.',\n        // Note: vanilla node does does not have file extension\n        moduleFilename: join(TEST_DIR, `[stdin].ts`),\n        modulePaths,\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, `[stdin].ts`)}:1:`),\n        moduleAccessorsTest: null,\n        argv: [tsNodeExe],\n      },\n      evalReport: false,\n      replReport: false,\n    });\n  });\n  test('repl', async (t) => {\n    const r = await execTester({\n      stdin: `${setReportGlobal('repl')};${printReports}`,\n      flags: '-i',\n    });\n    const report = parseStdoutStripReplPrompt(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: false,\n      replReport: {\n        __filename: false,\n        __dirname: false,\n        moduleId: '<repl>',\n        modulePath: '.',\n        moduleFilename: null,\n        modulePaths: expect.objectContaining({\n          ...[join(TEST_DIR, `repl/node_modules`), ...modulePaths],\n        }),\n        // Note: vanilla node REPL does not set exports\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, replFile)}:4:`),\n        moduleAccessorsTest: true,\n        argv: [tsNodeExe],\n      },\n    });\n    // Prior to these, nyc adds another entry on Windows; we need to ignore it\n    expect(report.replReport.modulePaths.slice(-3)).toMatchObject([\n      join(homedir(), `.node_modules`),\n      join(homedir(), `.node_libraries`),\n      // additional entry goes to node's install path\n      expect.any(String),\n    ]);\n  });\n\n  // Should ignore -i and run the entrypoint\n  test('-i w/entrypoint ignores -i', async (t) => {\n    const r = await execTester({\n      stdin: `${setReportGlobal('repl')};${printReports}`,\n      flags: '-i ./repl/script.js',\n    });\n    const report = parseStdout(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: false,\n      replReport: false,\n    });\n  });\n\n  // Should not execute stdin\n  // Should not interpret positional arg as an entrypoint script\n  test('-e', async (t) => {\n    const r = await execTester({\n      stdin: `throw new Error()`,\n      flags: `-e \"${setReportGlobal('eval')};${printReports}\"`,\n    });\n    const report = parseStdout(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: {\n        __filename: '[eval]',\n        __dirname: '.',\n        moduleId: '[eval]',\n        modulePath: '.',\n        // Note: vanilla node does does not have file extension\n        moduleFilename: join(TEST_DIR, `[eval].ts`),\n        modulePaths: [...modulePaths],\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, `[eval].ts`)}:1:`),\n        moduleAccessorsTest: true,\n        argv: [tsNodeExe],\n      },\n      replReport: false,\n    });\n  });\n  test('-e w/entrypoint arg does not execute entrypoint', async (t) => {\n    const r = await execTester({\n      stdin: `throw new Error()`,\n      flags: `-e \"${setReportGlobal('eval')};${printReports}\" ./repl/script.js`,\n    });\n    const report = parseStdout(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: {\n        __filename: '[eval]',\n        __dirname: '.',\n        moduleId: '[eval]',\n        modulePath: '.',\n        // Note: vanilla node does does not have file extension\n        moduleFilename: join(TEST_DIR, `[eval].ts`),\n        modulePaths,\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, `[eval].ts`)}:1:`),\n        moduleAccessorsTest: true,\n        argv: [tsNodeExe, './repl/script.js'],\n      },\n      replReport: false,\n    });\n  });\n  test('-e w/non-path arg', async (t) => {\n    const r = await execTester({\n      stdin: `throw new Error()`,\n      flags: `-e \"${setReportGlobal('eval')};${printReports}\" ./does-not-exist.js`,\n    });\n    const report = parseStdout(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: {\n        __filename: '[eval]',\n        __dirname: '.',\n        moduleId: '[eval]',\n        modulePath: '.',\n        // Note: vanilla node does does not have file extension\n        moduleFilename: join(TEST_DIR, `[eval].ts`),\n        modulePaths,\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, `[eval].ts`)}:1:`),\n        moduleAccessorsTest: true,\n        argv: [tsNodeExe, './does-not-exist.js'],\n      },\n      replReport: false,\n    });\n  });\n  test('-e -i', async (t) => {\n    const r = await execTester({\n      stdin: `${setReportGlobal('repl')};${printReports}`,\n      flags: `-e \"${setReportGlobal('eval')}\" -i`,\n    });\n    const report = parseStdoutStripReplPrompt(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: {\n        __filename: '[eval]',\n        __dirname: '.',\n        moduleId: '[eval]',\n        modulePath: '.',\n        // Note: vanilla node does does not have file extension\n        moduleFilename: join(TEST_DIR, `[eval].ts`),\n        modulePaths,\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, `[eval].ts`)}:1:`),\n        moduleAccessorsTest: true,\n        argv: [tsNodeExe],\n      },\n      replReport: {\n        __filename: '[eval]',\n        __dirname: '.',\n        moduleId: '<repl>',\n        modulePath: '.',\n        moduleFilename: null,\n        modulePaths: expect.objectContaining({\n          ...[join(TEST_DIR, `repl/node_modules`), ...modulePaths],\n        }),\n        // Note: vanilla node REPL does not set exports, so this would be false\n        exportsTest: true,\n        // Note: vanilla node uses different name. See #1360\n        stackTest: expect.stringContaining(`    at ${join(TEST_DIR, replFile)}:4:`),\n        moduleAccessorsTest: true,\n        argv: [tsNodeExe],\n      },\n    });\n    // Prior to these, nyc adds another entry on Windows; we need to ignore it\n    expect(report.replReport.modulePaths.slice(-3)).toMatchObject([\n      join(homedir(), `.node_modules`),\n      join(homedir(), `.node_libraries`),\n      // additional entry goes to node's install path\n      expect.any(String),\n    ]);\n  });\n\n  test('-e -i w/entrypoint ignores -e and -i, runs entrypoint', async (t) => {\n    const r = await execTester({\n      stdin: `throw new Error()`,\n      flags: '-e \"throw new Error()\" -i ./repl/script.js',\n    });\n    const report = parseStdout(r.stdout);\n    expect(report).toMatchObject({\n      stdinReport: false,\n      evalReport: false,\n      replReport: false,\n    });\n  });\n\n  test('-e -i when -e throws error, -i does not run', async (t) => {\n    const r = await execTester({\n      stdin: `console.log('hello')`,\n      flags: `-e \"throw new Error('error from -e')\" -i`,\n      expectError: true,\n    });\n    expect(r.err).toBeDefined();\n    expect(r.stdout).toBe('');\n    expect(r.stderr).toContain('error from -e');\n  });\n\n  // Serial because it's timing-sensitive\n  test.serial(\n    'programmatically, eval-ing before starting REPL',\n    programmaticTest,\n    {\n      evalCodeBefore: `${setReportGlobal('repl')};${saveReportsAsGlobal}`,\n      stdinCode: '',\n      waitFor: () => !!globalInRepl.testReport,\n    },\n    (stdout) => {\n      expect(globalInRepl.testReport).toMatchObject({\n        stdinReport: false,\n        evalReport: false,\n        replReport: {\n          __filename: false,\n          __dirname: false,\n\n          // Due to limitations in node's REPL API, we can't really expose\n          // the `module` prior to calling repl.start() which also sends\n          // output to stdout.\n          // For now, leaving this as unsupported / undefined behavior.\n\n          // moduleId: '<repl>',\n          // modulePath: '.',\n          // moduleFilename: null,\n          // modulePaths: [\n          //   join(ROOT_DIR, `repl/node_modules`),\n          //   ...rootModulePaths,\n          //   join(homedir(), `.node_modules`),\n          //   join(homedir(), `.node_libraries`),\n          //   // additional entry goes to node's install path\n          //   exp.any(String),\n          // ],\n          // // Note: vanilla node REPL does not set exports\n          // exportsTest: true,\n          // moduleAccessorsTest: true,\n\n          // Note: vanilla node uses different name. See #1360\n          stackTest: expect.stringContaining(`    at ${join(TEST_DIR, replFile)}:1:`),\n        },\n      });\n    }\n  );\n  test.serial(\n    'programmatically, passing code to stdin after starting REPL',\n    programmaticTest,\n    {\n      evalCodeBefore: null,\n      stdinCode: `${setReportGlobal('repl')};${saveReportsAsGlobal}`,\n      waitFor: () => !!globalInRepl.testReport,\n    },\n    (stdout) => {\n      expect(globalInRepl.testReport).toMatchObject({\n        stdinReport: false,\n        evalReport: false,\n        replReport: {\n          __filename: false,\n          __dirname: false,\n          moduleId: '<repl>',\n          modulePath: '.',\n          moduleFilename: null,\n          modulePaths: expect.objectContaining({\n            ...[join(TEST_DIR, `repl/node_modules`), ...modulePaths],\n          }),\n          // Note: vanilla node REPL does not set exports\n          exportsTest: true,\n          // Note: vanilla node uses different name. See #1360\n          stackTest: expect.stringContaining(`    at ${join(TEST_DIR, replFile)}:1:`),\n          moduleAccessorsTest: true,\n        },\n      });\n      // Prior to these, nyc adds another entry on Windows; we need to ignore it\n      expect(globalInRepl.testReport.replReport.modulePaths.slice(-3)).toMatchObject([\n        join(homedir(), `.node_modules`),\n        join(homedir(), `.node_libraries`),\n        // additional entry goes to node's install path\n        expect.any(String),\n      ]);\n    }\n  );\n});\n"]}