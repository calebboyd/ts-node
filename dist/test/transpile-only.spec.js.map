{"version":3,"file":"transpile-only.spec.js","sourceRoot":"","sources":["../../src/test/transpile-only.spec.ts"],"names":[],"mappings":";;AAAA,yCAA4C;AAC5C,uCAAsE;AACtE,2DAAwE;AACxE,2CAA2C;AAC3C,uCAA4C;AAE5C,MAAM,IAAI,GAAG,IAAA,iBAAO,EAAC,mBAAS,CAAC,CAAC;AAEhC,MAAM,IAAI,GAAG,IAAA,iBAAU,EAAC;IACtB,GAAG,EAAE,gBAAQ;CACd,CAAC,CAAC;AAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;IACpD,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,6CAA6B,2BAA2B,CAAC,CAAC;IAClF,IAAI,CAAC,CAAC,GAAG,KAAK,IAAI,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACpE;IAED,IAAA,gBAAM,EAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;IAC/D,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,6CAA6B,kCAAkC,CAAC,CAAC;IACzF,IAAI,CAAC,CAAC,GAAG,KAAK,IAAI,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACpE;IAED,IAAA,gBAAM,EAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,KAAK,CAAC,gFAAgF,EAAE,CAAC,IAAI,EAAE,EAAE;IACpG,IAAI,CAAC,EAAE,CAAC,wCAA8B,CAAC,CAAC;IACxC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;QACvB,8CAA8C;QAC9C,oDAAoD;QACpD,uBAAuB;QACvB,oHAAoH;QACpH,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC;YAC/C,aAAa,EAAE,IAAI;YACnB,eAAe,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE;SAChD,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,yBAAyB,EAAE,WAAW,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { createExec } from './helpers/exec';\nimport { ctxTsNode, tsSupportsVerbatimModuleSyntax } from './helpers';\nimport { CMD_TS_NODE_WITH_PROJECT_FLAG } from './helpers/command-lines';\nimport { TEST_DIR } from './helpers/paths';\nimport { expect, context } from './testlib';\n\nconst test = context(ctxTsNode);\n\nconst exec = createExec({\n  cwd: TEST_DIR,\n});\n\ntest('should support transpile only mode', async () => {\n  const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only -pe \"x\"`);\n  if (r.err === null) {\n    throw new Error('Command was expected to fail, but it succeeded.');\n  }\n\n  expect(r.err.message).toMatch('ReferenceError: x is not defined');\n});\n\ntest('should throw error even in transpileOnly mode', async () => {\n  const r = await exec(`${CMD_TS_NODE_WITH_PROJECT_FLAG} --transpile-only -pe \"console.\"`);\n  if (r.err === null) {\n    throw new Error('Command was expected to fail, but it succeeded.');\n  }\n\n  expect(r.err.message).toMatch('error TS1003: Identifier expected');\n});\n\ntest.suite('verbatimModuleSyntax w/transpileOnly should not raise configuration diagnostic', (test) => {\n  test.if(tsSupportsVerbatimModuleSyntax);\n  test('test', async (t) => {\n    // Mixing verbatimModuleSyntax w/transpileOnly\n    // https://github.com/TypeStrong/ts-node/issues/1971\n    // We should *not* get:\n    // \"error TS5104: Option 'isolatedModules' is redundant and cannot be specified with option 'verbatimModuleSyntax'.\"\n    const service = t.context.tsNodeUnderTest.create({\n      transpileOnly: true,\n      compilerOptions: { verbatimModuleSyntax: true },\n    });\n    service.compile('const foo: string = 123', 'module.ts');\n  });\n});\n"]}