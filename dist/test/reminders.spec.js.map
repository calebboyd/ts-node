{"version":3,"file":"reminders.spec.js","sourceRoot":"","sources":["../../src/test/reminders.spec.ts"],"names":[],"mappings":";AAAA,+DAA+D;;AAE/D,uCAA+D;AAC/D,uCAAyC;AAEzC,IAAA,cAAI,EAAC,yIAAyI,EAAE,KAAK,IAAI,EAAE;IACzJ,4IAA4I;IAC5I,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,SAAS,KAAK,CAAC,KAAa,EAAE,IAAY,EAAE,QAAiB;QAC3D,IAAI,QAAQ;YAAE,IAAA,gBAAM,EAAC,YAAE,CAAC,UAAU,CAAC,IAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,YAAE,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;YACtC,IAAA,gBAAM,EAAC,YAAE,CAAC,UAAU,CAAC,IAAW,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;SACpD;aAAM;YACL,IAAA,gBAAM,EAAC,YAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;SAClC;IACH,CAAC;IACD,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACvB,KAAK,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IAC3B,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACtB,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACtB,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACzB,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACzB,IAAI;QACF,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC1B,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC3B;IAAC,MAAM;QACN,wDAAwD;QACxD,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACzB,IAAA,gBAAM,EAAC,YAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;KAC3C;IACD,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC1B,IAAI,wCAA8B,EAAE;QAClC,KAAK,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC5B;SAAM;QACL,KAAK,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC7B;IACD,KAAK,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IAC9B,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,CAAC;IAC9C,UAAU,CAAC,IAAI,EAAE,CAAC;IAClB,SAAS,CAAC,IAAI,EAAE,CAAC;IACjB,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","sourcesContent":["// Reminders about chores to stay up-to-date with the ecosystem\n\nimport { ts, tsSupportsStableNodeNextNode16 } from './helpers';\nimport { expect, test } from './testlib';\n\ntest('Detect when typescript adds new ModuleKind values; flag as a failure so we can update our code flagged [MUST_UPDATE_FOR_NEW_MODULEKIND]', async () => {\n  // We have marked a few places in our code with MUST_UPDATE_FOR_NEW_MODULEKIND to make it easier to update them when TS adds new ModuleKinds\n  const foundKeys: string[] = [];\n  function check(value: number, name: string, required: boolean) {\n    if (required) expect(ts.ModuleKind[name as any]).toBe(value);\n    if (ts.ModuleKind[value] === undefined) {\n      expect(ts.ModuleKind[name as any]).toBeUndefined();\n    } else {\n      expect(ts.ModuleKind[value]).toBe(name);\n      foundKeys.push(name, `${value}`);\n    }\n  }\n  check(0, 'None', true);\n  check(1, 'CommonJS', true);\n  check(2, 'AMD', true);\n  check(3, 'UMD', true);\n  check(4, 'System', true);\n  check(5, 'ES2015', true);\n  try {\n    check(6, 'ES2020', false);\n    check(99, 'ESNext', true);\n  } catch {\n    // the value changed: is `99` now, but was `6` in TS 2.7\n    check(6, 'ESNext', true);\n    expect(ts.ModuleKind[99]).toBeUndefined();\n  }\n  check(7, 'ES2022', false);\n  if (tsSupportsStableNodeNextNode16) {\n    check(100, 'Node16', true);\n  } else {\n    check(100, 'Node12', false);\n  }\n  check(199, 'NodeNext', false);\n  const actualKeys = Object.keys(ts.ModuleKind);\n  actualKeys.sort();\n  foundKeys.sort();\n  expect(actualKeys).toEqual(foundKeys);\n});\n"]}