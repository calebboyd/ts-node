{"version":3,"file":"transpilers.spec.js","sourceRoot":"","sources":["../../src/test/transpilers.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// third-party transpiler and swc transpiler tests\n// TODO: at the time of writing, other transpiler tests have not been moved into this file.\n// Should consolidate them here.\n\nimport { context } from './testlib';\nimport {\n  CMD_TS_NODE_WITHOUT_PROJECT_FLAG,\n  createExec,\n  ctxTsNode,\n  testsDirRequire,\n  TEST_DIR,\n  tsSupportsImportAssertions,\n  tsSupportsReact17JsxFactories,\n  tsSupportsEs2022,\n} from './helpers';\nimport { createSwcOptions } from '../transpilers/swc';\nimport * as expect from 'expect';\nimport { outdent } from 'outdent';\nimport { join } from 'path';\n\nconst test = context(ctxTsNode);\n\ntest.suite('swc', (test) => {\n  test('verify that TS->SWC target mappings suppport all possible values from both TS and SWC', async (t) => {\n    const swcTranspiler = testsDirRequire(\n      'ts-node/transpilers/swc-experimental'\n    ) as typeof import('../transpilers/swc');\n\n    // Detect when mapping is missing any ts.ScriptTargets\n    const ts = testsDirRequire('typescript') as typeof import('typescript');\n    for (const key of Object.keys(ts.ScriptTarget)) {\n      if (/^\\d+$/.test(key)) continue;\n      if (key === 'JSON') continue;\n      expect(swcTranspiler.targetMapping.has(ts.ScriptTarget[key as any] as any)).toBe(true);\n    }\n\n    // Detect when mapping is missing any swc targets\n    // Assuming that tests/package.json declares @swc/core: latest\n    const swc = testsDirRequire('@swc/core');\n    let msg: string | undefined = undefined;\n    try {\n      swc.transformSync('', { jsc: { target: 'invalid' } });\n    } catch (e) {\n      msg = (e as Error).message;\n    }\n    expect(msg).toBeDefined();\n    // Error looks like:\n    // unknown variant `invalid`, expected one of `es3`, `es5`, `es2015`, `es2016`, `es2017`, `es2018`, `es2019`, `es2020`, `es2021` at line 1 column 28\n    const match = msg!.match(/unknown variant.*, expected one of (.*) at line/);\n    expect(match).toBeDefined();\n    const targets = match![1].split(', ').map((v: string) => v.slice(1, -1));\n\n    for (const target of targets) {\n      expect([...swcTranspiler.targetMapping.values()]).toContain(target);\n    }\n  });\n\n  test.suite('converts TS config to swc config', (test) => {\n    test.suite('jsx', (test) => {\n      const macro = test.macro((jsx: string, runtime?: string, development?: boolean) => [\n        () => `jsx=${jsx}`,\n        async (t) => {\n          const tsNode = t.context.tsNodeUnderTest.create({\n            compilerOptions: {\n              jsx,\n            },\n          });\n          const swcOptions = createSwcOptions(tsNode.config.options, undefined, require('@swc/core'), '@swc/core');\n          expect(swcOptions.tsxOptions.jsc?.transform?.react).toBeDefined();\n          expect(swcOptions.tsxOptions.jsc?.transform?.react?.development).toBe(development);\n          expect(swcOptions.tsxOptions.jsc?.transform?.react?.runtime).toBe(runtime);\n        },\n      ]);\n\n      test(macro, 'react', undefined, undefined);\n      test.suite('react 17 jsx factories', (test) => {\n        test.if(tsSupportsReact17JsxFactories);\n        test(macro, 'react-jsx', 'automatic', undefined);\n        test(macro, 'react-jsxdev', 'automatic', true);\n      });\n    });\n  });\n\n  const compileMacro = test.macro((compilerOptions: object, input: string, expectedOutput: string) => [\n    (title?: string) => title ?? `${JSON.stringify(compilerOptions)}`,\n    async (t) => {\n      const code = t.context.tsNodeUnderTest\n        .create({\n          swc: true,\n          skipProject: true,\n          compilerOptions,\n        })\n        .compile(input, 'input.tsx');\n      expect(code.replace(/\\/\\/# sourceMappingURL.*/, '').trim()).toBe(expectedOutput);\n    },\n  ]);\n\n  test.suite('transforms various forms of jsx', (test) => {\n    const input = outdent`\n      const div = <div></div>;\n    `;\n\n    test(\n      compileMacro,\n      { module: 'esnext', target: 'es2020', jsx: 'react' },\n      input,\n      `const div = /*#__PURE__*/ React.createElement(\"div\", null);`\n    );\n    test.suite('react 17 jsx factories', (test) => {\n      test.if(tsSupportsReact17JsxFactories);\n      test(\n        compileMacro,\n        { module: 'esnext', target: 'es2020', jsx: 'react-jsx' },\n        input,\n        outdent`\n          import { jsx as _jsx } from \"react/jsx-runtime\";\n          const div = /*#__PURE__*/ _jsx(\"div\", {});\n        `\n      );\n      test(\n        compileMacro,\n        { module: 'esnext', target: 'es2020', jsx: 'react-jsxdev' },\n        input,\n        outdent`\n          import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n          const div = /*#__PURE__*/ _jsxDEV(\"div\", {}, void 0, false, {\n              fileName: \"input.tsx\",\n              lineNumber: 1,\n              columnNumber: 13\n          }, this);\n        `\n      );\n    });\n  });\n\n  test.suite('preserves import assertions for json imports', (test) => {\n    test.if(tsSupportsImportAssertions);\n    test(\n      'basic json import',\n      compileMacro,\n      { module: 'esnext' },\n      outdent`\n        import document from './document.json' assert {type: 'json'};\n        document;\n      `,\n      outdent`\n        import document from './document.json' assert {\n            type: 'json'\n        };\n        document;\n      `\n    );\n  });\n\n  test.suite('useDefineForClassFields', (test) => {\n    const input = outdent`\n      class Foo {\n        bar = 1;\n      }\n    `;\n    const outputNative = outdent`\n      let Foo = class Foo {\n          bar = 1;\n      };\n    `;\n    const outputCtorAssignment = outdent`\n      let Foo = class Foo {\n          constructor(){\n              this.bar = 1;\n          }\n      };\n    `;\n    const outputCtorAssignmentInEs5Class = outdent`\n      function _class_call_check(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n          }\n      }\n      var Foo = function Foo() {\n          \"use strict\";\n          _class_call_check(this, Foo);\n          this.bar = 1;\n      };\n    `;\n    const outputDefine = outdent`\n      function _define_property(obj, key, value) {\n          if (key in obj) {\n              Object.defineProperty(obj, key, {\n                  value: value,\n                  enumerable: true,\n                  configurable: true,\n                  writable: true\n              });\n          } else {\n              obj[key] = value;\n          }\n          return obj;\n      }\n      let Foo = class Foo {\n          constructor(){\n              _define_property(this, \"bar\", 1);\n          }\n      };\n    `;\n    const outputDefineInEs5Class = outdent`\n      function _class_call_check(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n          }\n      }\n      function _define_property(obj, key, value) {\n          if (key in obj) {\n              Object.defineProperty(obj, key, {\n                  value: value,\n                  enumerable: true,\n                  configurable: true,\n                  writable: true\n              });\n          } else {\n              obj[key] = value;\n          }\n          return obj;\n      }\n      var Foo = function Foo() {\n          \"use strict\";\n          _class_call_check(this, Foo);\n          _define_property(this, \"bar\", 1);\n      };\n    `;\n    test(\n      'useDefineForClassFields unset, `next` target, should default to true and emit native property assignment',\n      compileMacro,\n      { module: 'esnext', target: 'ESNext' },\n      input,\n      outputNative\n    );\n    test.suite(\n      'useDefineForClassFields unset, new target, should default to true and emit native property assignment',\n      (test) => {\n        test.if(tsSupportsEs2022);\n        test(compileMacro, { module: 'esnext', target: 'ES2022' }, input, outputNative);\n      }\n    );\n    test(\n      'useDefineForClassFields unset, should default to false b/c old target',\n      compileMacro,\n      { module: 'esnext', target: 'ES2021' },\n      input,\n      outputCtorAssignment\n    );\n    test.suite('useDefineForClassFields=true, new target, should emit native property assignment', (test) => {\n      test.if(tsSupportsEs2022);\n      test(\n        compileMacro,\n        {\n          module: 'esnext',\n          target: 'ES2022',\n          useDefineForClassFields: true,\n        },\n        input,\n        outputNative\n      );\n    });\n    test(\n      'useDefineForClassFields=true, old target, should emit define',\n      compileMacro,\n      {\n        module: 'esnext',\n        target: 'ES2021',\n        useDefineForClassFields: true,\n      },\n      input,\n      outputDefine\n    );\n    test.suite(\n      'useDefineForClassFields=false, new target, should still emit legacy property assignment in ctor',\n      (test) => {\n        test.if(tsSupportsEs2022);\n        test(\n          compileMacro,\n          {\n            module: 'esnext',\n            target: 'ES2022',\n            useDefineForClassFields: false,\n          },\n          input,\n          outputCtorAssignment\n        );\n      }\n    );\n    test(\n      'useDefineForClassFields=false, old target, should emit legacy property assignment in ctor',\n      compileMacro,\n      {\n        module: 'esnext',\n        target: 'ES2021',\n        useDefineForClassFields: false,\n      },\n      input,\n      outputCtorAssignment\n    );\n    test(\n      'useDefineForClassFields=false, ancient target, should emit legacy property assignment in legacy function-based class',\n      compileMacro,\n      {\n        module: 'esnext',\n        target: 'es5',\n        useDefineForClassFields: false,\n      },\n      input,\n      outputCtorAssignmentInEs5Class\n    );\n    test(\n      'useDefineForClassFields=true, ancient target, should emit define in legacy function-based class',\n      compileMacro,\n      {\n        module: 'esnext',\n        target: 'es5',\n        useDefineForClassFields: true,\n      },\n      input,\n      outputDefineInEs5Class\n    );\n  });\n\n  test.suite('jsx and jsxImportSource', (test) => {\n    test(\n      'jsx=react-jsx',\n      compileMacro,\n      {\n        module: 'esnext',\n        jsx: 'react-jsx',\n      },\n      outdent`\n      <div></div>\n    `,\n      outdent`\n      /*#__PURE__*/ import { jsx as _jsx } from \"react/jsx-runtime\";\n      _jsx(\"div\", {});\n    `\n    );\n    test(\n      'jsx=react-jsx w/custom jsxImportSource',\n      compileMacro,\n      {\n        module: 'esnext',\n        jsx: 'react-jsx',\n        jsxImportSource: 'foo',\n      },\n      outdent`\n      <div></div>\n    `,\n      outdent`\n      /*#__PURE__*/ import { jsx as _jsx } from \"foo/jsx-runtime\";\n      _jsx(\"div\", {});\n    `\n    );\n  });\n\n  test.suite(\n    '#1996 regression: ts-node gracefully allows swc to not return a sourcemap for type-only files',\n    (test) => {\n      // https://github.com/TypeStrong/ts-node/issues/1996\n      // @swc/core 1.3.51 returned `undefined` instead of sourcemap if the file was empty or only exported types.\n      // Newer swc versions do not do this. But our typedefs technically allow it.\n      const exec = createExec({\n        cwd: join(TEST_DIR, '1996'),\n      });\n      test('import empty file w/swc', async (t) => {\n        const r = await exec(`${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} ./index.ts`);\n        expect(r.err).toBe(null);\n        expect(r.stdout).toMatch(/#1996 regression test./);\n      });\n      test('use custom transpiler which never returns a sourcemap', async (t) => {\n        const r = await exec(\n          `${CMD_TS_NODE_WITHOUT_PROJECT_FLAG} --project tsconfig.custom-transpiler.json ./empty.ts`\n        );\n        expect(r.err).toBe(null);\n        expect(r.stdout).toMatch(/#1996 regression test with custom transpiler./);\n      });\n    }\n  );\n});\n"]}